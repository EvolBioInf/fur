#+begin_src latex
  \section{Introduction}
  The design of diagnostic PCR primers is often hampered by an excess of
  candidates that also amplify off-target regions. To minimize the
  chance of cross-amplification, primers should be designed from
  template sequences that are unique to the target strain. The program
  \texttt{fur} \emph{finds unique regions} by comparing the genomes of a
  sample of target strains to the genomes of the closest relatives the
  targets are to be distinguished from. The underlying heuristic is that
  any region that distinguishes a target from its closest relatives,
  also distinguishes it from all other sequences out there.

  Consider, for example, \textit{Escherichia coli} ST131, a multi-drug
  resistant strain that causes urinary tract and blood infections in
  humans~\cite{pet14:glo}. \emph{E. coli} ST131 belongs to the B2
  phylogenetic subgroup, which corresponds to serotype O25b:H4.
  Figure~\ref{fig:eco} shows the phylogeny of 105 \emph{E. coli} B2
  strains. The clade marked ST131 comprises 95 strains newly sequenced
  by~\cite{pet14:glo}, plus three STS131 reference genomes, SE15, NA114,
  and EC958. This clade defines the \emph{targets} marked $\mathcal{T}$
  in Figure~\ref{fig:eco}. The seven remaining
  \emph{E. coli} strains are the \emph{neighbors}, $\mathcal{N}$. They also
  belong to the B2 group, but not to ST131~\cite{pet14:glo}. The aim is
  to find regions specific to ST131. In Section~\ref{sec:furTut} a
  tutorial-style analysis of this data set shows how to do this
  using \texttt{fur}.

      \begin{figure}
	\begin{center}
	  \tiny
	  \resizebox{\textwidth}{!}{\input{eco105}}
	\end{center}
	\caption{Phylogeny of 105 strains of \emph{Eschericia coli}
	  computed from whole genome sequences using
	  \texttt{andi}~\cite{hau15:and}. The scale bar is the number of
	  substitutions per site. The clade marked ST131 contains the
	  pathogenic targets ($\mathcal{T}$), the remaining seven
	  strains are the neighbors ($\mathcal{N}$).}\label{fig:eco}
      \end{figure}

  The program takes as input a database computed using
  \texttt{makeFurDb}\footnote{\texttt{https://github.com/haubold/makeFurDb/}}
  from two directories of sequence files, the first contains one or more
  target genomes, the second one or more neighbor genomes. \texttt{fur}
  uses \texttt{macle}~\cite{pir18:hig} to identify candidate regions
  that are unique to a representative target when compared to all
  neighbors. These candidate regions are then checked for presence in
  all targets using \texttt{phylonium}~\cite{klo20:phy} and absence from
  all neighbors using BLAST \cite{alt97:gap}. The resulting templates are finally printed
  to screen. They are now ready for submission to a primer design
  program like \texttt{primer3}~\cite{unt12:pri}.

  \section{Implementation}
  The program is based on arrays of sequences and arrays of intervals on
  those sequences. Arrays of sequences are defined in \texttt{seq.h},
  while intervals and their arrays are still to be defined. Apart from
  data structures for intervals and their arrays, the program consists
  of the usual include section, declarations and definitions of
  functions, and finally the \texttt{main} function.
  \begin{prog}[\texttt{fur}]\label{fur}
    \textcolor{white}{}
#+end_src
#+begin_src C <<fur.c>>=
  #include "seq.h"
  //<<Include headers, P. \ref{fur}>>
  //<<Data structures, P. \ref{fur}>>
  //<<Function declarations, P. \ref{fur}>>
  //<<Function definitions, P. \ref{fur}>>
  //<<Main function, P. \ref{fur}>>
#+end_src
#+begin_src latex
  \end{prog}
  \subsection{Arrays of Intervals}
  Intervals and their arrays are the basic building blocks of
  \texttt{fur} still undefined, so they are defined first. Intervals
  have a start and an end.
#+end_src
#+begin_src C <<Data structures, P. \ref{fur}>>=
  typedef struct intv {
    int s, e;
  } Intv;
#+end_src
#+begin_src latex
  An arbitrary number of $n$ intervals is stored in an \emph{interval array}.
#+end_src
#+begin_src C <<Data structures, P. \ref{fur}>>=
  typedef struct intvArr {
    Intv **arr;
    int n;
  } IntvArr;
#+end_src
#+begin_src latex
  Interval arrays require functions for construction, freeing, and
  addition. Construction is declared with start and end positions
  supplied as parameters.
#+end_src
#+begin_src C <<Function declarations, P. \ref{fur}>>=
  Intv *newIntv(int s, int e);
#+end_src
#+begin_src latex
  These positions are saved once space has been allocated for them.
#+end_src
#+begin_src C <<Function definitions, P. \ref{fur}>>=
  Intv *newIntv(int s, int e) {
    Intv *i = (Intv *)emalloc(sizeof(Intv));
    i->s = s;
    i->e = e;
    return i;
  }
#+end_src
#+begin_src latex
  The function \texttt{emalloc} is declared in \texttt{error.h}.
#+end_src
#+begin_src C <<Include headers, P. \ref{fur}>>=
  #include "error.h"
#+end_src
#+begin_src latex
  Next, the construction of an interval array is declared.
#+end_src
#+begin_src C <<Function declarations, P. \ref{fur}>>=
  IntvArr *newIntvArr();
#+end_src
#+begin_src latex
  Its definition returns an empty array of intervals.
#+end_src
#+begin_src C <<Function definitions, P. \ref{fur}>>=
  IntvArr *newIntvArr() {
    IntvArr *ia = (IntvArr *)emalloc(sizeof(IntvArr));
    ia->arr = NULL;
    ia->n = 0;
    return ia;
  }
#+end_src
#+begin_src latex
  Freeing of an interval array is declared.
#+end_src
#+begin_src C <<Function declarations, P. \ref{fur}>>=
  void freeIntvArr(IntvArr *ia);
#+end_src
#+begin_src latex
  In its definition each interval is freed in turn before the interval
  array itself is freed.
#+end_src
#+begin_src C <<Function definitions, P. \ref{fur}>>=
  void freeIntvArr(IntvArr *ia) {
    for (int i = 0; i < ia->n; i++)
      free(ia->arr[i]);
    free(ia->arr);
    free(ia);
  }
#+end_src
#+begin_src latex
  Declare the addition of an interval to an existing interval array.
#+end_src
#+begin_src C <<Function declarations, P. \ref{fur}>>=
  void intvArrAdd(IntvArr *ia, Intv *i);
#+end_src
#+begin_src latex
  The definition makes space for the newly arrived interval and then
  adds it.
#+end_src
#+begin_src C <<Function definitions, P. \ref{fur}>>=
  void intvArrAdd(IntvArr *ia, Intv *i) {
    ia->arr = (Intv **)
      erealloc(ia->arr, (ia->n + 1) * sizeof(Intv *));
    ia->arr[ia->n++] = i;
  }
#+end_src
#+begin_src latex
  Interval arrays are now ready to be used. This is done in the
  \texttt{main} function, which first interacts with the user, then
  analyzes the targets and neighbors, and finally prints the desired
  templates. At the end of the program, any memory still allocated is
  freed.
#+end_src
#+begin_src C <<Main function, P. \ref{fur}>>=
  int main(int argc, char **argv) {
    // <<Interact with user, P. \ref{fur}>>
    // <<Analyze sequences, P. \ref{fur}>>
    // <<Print templates, P. \ref{fur}>>
    // <<Free memory, P. \ref{fur}>>
  }
#+end_src
#+begin_src latex
  \subsection{User Interaction}
  Whenever the program interacts with the user, it identifies itself, so
  its name is set.
#+end_src
#+begin_src C <<Interact with user, P. \ref{fur}>>=
  setprogname(argv[0]);
#+end_src
#+begin_src latex
  The function \texttt{setprogname} is declared in the standard part of
  the BSD library.
#+end_src
#+begin_src C <<Include headers, P. \ref{fur}>>=
  #include <bsd/stdlib.h>
#+end_src
#+begin_src latex
  The user interaction is mediated via a container holding the options
  and their arguments.
#+end_src
#+begin_src C <<Interact with user, P. \ref{fur}>>=
  Args *args = getArgs(argc, argv);
#+end_src
#+begin_src latex
  The \texttt{Args} data structure and the \texttt{getArgs} function are
  declared in \texttt{interface.h}.
#+end_src
#+begin_src C <<Include headers, P. \ref{fur}>>=
  #include "interface.h"
#+end_src
#+begin_src latex
  The argument container is freed at the end.
#+end_src
#+begin_src C <<Free memory, P. \ref{fur}>>=
  freeArgs(args);
#+end_src
#+begin_src latex
  The options passed via \texttt{args} might include a request for help,
  or indicate an error. In that case, \texttt{printUsage}, which is also
  declared in \texttt{interface.h}, emits a usage message before
  exiting.
#+end_src
#+begin_src C <<Interact with user, P. \ref{fur}>>=
  if (args->h || args->err)
    printUsage();
#+end_src
#+begin_src latex
  Alternatively, the user might request information about the program,
  whereupon it makes a modest splash and exits.
#+end_src
#+begin_src C <<Interact with user, P. \ref{fur}>>=
  if (args->v)
    printSplash(args);
#+end_src
#+begin_src latex
  The last option we check is \ty{-p}, which might indicate a $P$-value
  that's not between 0 and 1. In that case we write a friendly message
  and print the usage.
#+end_src
#+begin_src C <<Interact with user, P. \ref{fur}>>=
  if (args->p < 0.0 || args->p > 1.0) {
    fprintf(stderr, "Please use a P-value between 0 and 1.\n");
    printUsage();
  }
#+end_src
#+begin_src latex
  \subsection{Find Unique Templates}
  Analysis of the targets and neighbors proceeds in three steps:
  \begin{enumerate}
    \item Identify unique regions, $\mathcal{U}_1$, by comparing one
      representative target to all neighbors.
    \item Intersect $\mathcal{U}_1$ with the targets to get unique
      regions present in all targets, $\mathcal{U}_2$.
    \item Subtract the neighbors from $\mathcal{U}_2$ to get regions
      truly unique to the targets, $\mathcal{U}_3$. In theory, all
      regions in $\mathcal{U}_2$ should be unique with respect to the
      neighbors, so $\mathcal{U}_2=\mathcal{U}_3$. However, the
      construction of $\mathcal{U}_1$ is less sensitive than the
      subtraction step. So in practice we have $\mathcal{U}_2\supset\mathcal{U}_3$.
  \end{enumerate}
  To summarize, a set of unique regions is created (step 1) and then
  reduced to ensure its sensitivity (step 2) and specificity (step 3) as
  markers of the targets.
#+end_src
#+begin_src C <<Analyze sequences, P. \ref{fur}>>=
  //<<Identify unique regions, P. \ref{fur}>>
  //<<Intersect with targets, P. \ref{fur}>>
  //<<Subtract neighbors, P. \ref{fur}>>
#+end_src
#+begin_src latex
  Unique regions are identified using the external program
  \texttt{macle}\footnote{\texttt{https://github.com/evolbioinf/macle}}~\cite{pir18:hig}. This
  operates by traversing a pre-computed index. The index is part of the
  \texttt{fur} database and contains the neighbors augmented by the
  representative target. This index is used to compute local complexity
  values for identifying unique intervals.
#+end_src
#+begin_src C <<Identify unique regions, P. \ref{fur}>>=
  //<<Get representative target, P. \ref{fur}>>
  //<<Construct unique intervals, P. \ref{fur}>>
#+end_src
#+begin_src latex
  To obtain the representative target, its name is needed, which allows
  retrieval of its sequence.
#+end_src
#+begin_src C <<Get representative target, P. \ref{fur}>>=
  char rn[256];
  Seq *rs = NULL;
  //<<Get representative name, P. \ref{fur}>>
  //<<Get representative sequence, P. \ref{fur}>>
#+end_src
#+begin_src latex
  The representative name is obtained from the \texttt{macle} index,
  where it tops the name list, an ordering is ensured by
  \texttt{makeFurDb}.
#+end_src
#+begin_src C <<Get representative name, P. \ref{fur}>>=
  char *tmpl = "macle -l %s/macle.idx | "
    "head -n 6 | tail -n 1 | "
    "awk '{print $6 }'";
  char cmd[1024];
  sprintf(cmd, tmpl, args->d);
  FILE *pp = epopen(cmd, "r");
  if (fscanf(pp, "%s", rn) == EOF)
    error("couldn't run %s\n", cmd);
  pclose(pp);
#+end_src
#+begin_src latex
  With the name as handle, the corresponding sequence is extracted from
  the BLAST database.
#+end_src
#+begin_src C <<Get representative sequence, P. \ref{fur}>>=
  tmpl = "blastdbcmd -entry %s -db %s/blastdb";
  sprintf(cmd, tmpl, rn, args->d);
  pp = epopen(cmd, "r");
  Seq *sp;
  while ((sp = getSeq(pp)) != NULL)
    rs = sp;
  pclose(pp);
#+end_src
#+begin_src latex
  The representative target is freed at the end of the program.
#+end_src
#+begin_src C <<Free memory, P. \ref{fur}>>=
  freeSeq(rs);
#+end_src
#+begin_src latex
  To construct unique intervals, the complexity threshold indicating
  uniqueness is computed as preparation for the sliding window analysis
  of local complexity. Figure~\ref{fig:sw} shows a cartoon of a sliding
  window analysis. The overlapping windows returned by \texttt{macle}
  are characterized by their mid-points (dots) and are either unique
  (lightgray) or not (black). Unique windows are summarized into unique
  intervals (dashed). The user is told about the size of the preliminary
  template set, and the array of unique intervals is eventually
  converted to an array of unique sequences, the template candidates.

  \begin{figure}
    \begin{center}
      \input{sw}
    \end{center}
    \caption{Sliding window analysis of a genome sequence. The
      overlapping windows are centered on their mid-points (dots) and
      their complexity is either greater than the threshold, which makes
      them unique (lightgray), or not (black). Unique windows are
      summarized into the unique intervals $I_1$ and $I_2$ (dashed).}\label{fig:sw}
  \end{figure}

#+end_src
#+begin_src C <<Construct unique intervals, P. \ref{fur}>>=
  double mc, gc = 0.;
  long len = 0;
  IntvArr *ia;
  //<<Compute complexity threshold, P. \ref{fur}>>
  //<<Sliding window analysis, P. \ref{fur}>>
  //<<Report result of sliding window analysis, P. \ref{fur}>>
  //<<Prepare array of unique sequences, P. \ref{fur}>>
#+end_src
#+begin_src latex
  The complexity threshold is a function of aggregate sequence length,
  GC-content, window length, and the inverse of the cumulative
  distribution function (CDF) of the match length null
  distribution. Figure~\ref{fig:cdf} shows this function and how
  choosing a particular CDF-value on the $y$-axis, 0.95 in the example,
  corresponds to a complexity-threshold on the $x$-axis, 0.019. Sequence
  length and GC content are looked up in the \texttt{macle} index,
  window length and probability supplied by the user.

  \begin{figure}
    \begin{center}
      \scalebox{0.6}{\input{cdf}}
    \end{center}
    \caption{Cumulative distribution function (CDF) of the match
      complexity ($C_{\rm m}$) in 500 bp windows over a 35.5 Mb data set
      with GC-content 0.5~\cite{pir18:hig}. The parameter choice
      corresponds to the neighbors depicted in Figure~\ref{fig:eco}. The
      vertical line indicates the complexity threshold for a cumulative
      value of 0.95.}\label{fig:cdf}
  \end{figure}
#+end_src
#+begin_src C <<Compute complexity threshold, P. \ref{fur}>>=
  tmpl = "macle -l %s/macle.idx | "
    "tail -n +2 | "
    "awk '{print $2}'";
  sprintf(cmd, tmpl, args->d);
  pp = epopen(cmd, "r");
  if (fscanf(pp, "%ld", &len) == EOF)
    error("couldn't run %s\n", cmd);
  if (fscanf(pp, "%lf", &gc) == EOF)
    error("couldn't run %s\n", cmd);
  mc = quantCm(len, gc, args->w, args->p);
  pclose(pp);
#+end_src
#+begin_src latex
  The function \texttt{quantCm} is part of the
  \texttt{matchLen}\footnote{\texttt{https://github.com/evolbioinf/matchLen}}
  library.
#+end_src
#+begin_src C <<Include headers, P. \ref{fur}>>=
  #include "matchLen.h"
#+end_src
#+begin_src latex
  A sliding window analysis by \texttt{macle} returns pairs of values,
  $(m, C_{\rm m})$, where $m$ is the window midpoint and $C_{\rm m}$ its
  complexity. Let $t$ be the uniqueness threshold; if $C_{\rm m}\ge t$,
  the corresponding window is deemed unique. Such a window also belongs
  to a unique interval of one or more overlapping unique windows. As the
  algorithm parses the windows from left to right, it toggles between
  being inside or outside a unique interval.
#+end_src
#+begin_src C <<Sliding window analysis, P. \ref{fur}>>=
  //<<Prepare sliding window analysis, P. \ref{fur}>>
  while (fscanf(pp, "%f %f", &m, &c) != EOF) {
    //<<Determine window start and end, P. \ref{fur}>>
    if (in) {
      //<<Inside unique interval, P. \ref{fur}>>
    } else {
      //<<Outside unique interval, P. \ref{fur}>>
    }
  }
  pclose(pp);
#+end_src
#+begin_src latex
  The sliding window analysis requires the opening of a pipe for reading
  \texttt{macle} output. The pipe command consists of three steps. The
  first calls \texttt{macle}, the second cuts the $(m,C_{\rm m})$ pairs
  from the output, and the third removes windows without reliable
  sequence data, where $C_{\rm m}=-1$. In addition, the sliding window
  analysis requires variables for holding the current midpoint and
  complexity values, the interval array, and a variable to indicate
  whether the program is inside a unique interval or not.
#+end_src
#+begin_src C <<Prepare sliding window analysis, P. \ref{fur}>>=
  tmpl =
    "macle -i %s/macle.idx -n %s -w %d -k %d | "
    "cut -f 2,3 | "
    "awk '$2 > -1'";
  sprintf(cmd, tmpl, args->d, rn, args->w, args->k);
  pp = epopen(cmd, "r");
  float m, c;
  ia = newIntvArr();
  int is, ie, in = 0;
#+end_src
#+begin_src latex
  The start and end points of a window are calculated roughly as $m\pm w
  / 2$, where $w$ is the window length. To get the borders exactly
  right, consider a sequence of length 100, for which \texttt{macle}
  prints a mid-point of 50. To recover the correct start and end
  positions of 1 and 100 from this, compute
  \begin{eqnarray*}
    \mbox{start} & = & m - w / 2 + 1\\
    \mbox{end}   & = & m + w / 2
  \end{eqnarray*}                 
  Since positions in strings are zero-based, while \texttt{macle} output
  is one-based, the final start and end values are shifted by one
  position to the left.
#+end_src
#+begin_src C <<Determine window start and end, P. \ref{fur}>>=
  int ws = m - args->w / 2;
  int we = m + args->w / 2 - 1;
#+end_src
#+begin_src latex
  If a unique \emph{window} overlaps an existing unique \emph{interval},
  the interval is extended to the right (Figure~\ref{fig:sw}). If the
  unique window lies beyond the existing interval, the interval is
  ``closed'' at the endpoint found in the last extension and added to
  the interval array. Note that the interval is \emph{not} closed as
  soon as it cannot be extended. Such a rule would break up $I_1$ in
  Figure~\ref{fig:sw} into two overlapping and hence redundant
  intervals.
#+end_src
#+begin_src C <<Inside unique interval, P. \ref{fur}>>=
  if (ws <= ie && c >= mc)
    ie = we;
  else if (ws > ie) {
    in = 0;
    intvArrAdd(ia, newIntv(is, ie));
  }
#+end_src
#+begin_src latex
  If a unique window is found outside a unique
  interval, a new unique interval is created.
#+end_src
#+begin_src C <<Outside unique interval, P. \ref{fur}>>=
  if (c >= mc) {
    in = 1;
    is = m - args->w / 2;
    ie = m + args->w / 2 - 1;
  }
#+end_src
#+begin_src latex
  The result of the sliding window analysis is reported.
#+end_src
#+begin_src C <<Report result of sliding window analysis, P. \ref{fur}>>=
  int nn = 0, nm = 0;
  //<<Parse result of sliding window analysis, P. \ref{fur}>>
  char *h1 = "# Step                    Sequences  Nucleotides  "
    "Mutations (N)";
  char *h2 = "# ------------------------------------------------"
    "-------------";
  fprintf(stderr, "%s\n%s\n", h1, h2);
  tmpl = "# Sliding window             %6d     %8d         %6d\n";
  fprintf(stderr, tmpl, ia->n, nn, nm);
#+end_src
#+begin_src latex
  The result of the sliding window analysis is parsed by looking at
  residue to count \texttt{N}s and everything else.
#+end_src
#+begin_src C <<Parse result of sliding window analysis, P. \ref{fur}>>=
  for (int i = 0; i < ia->n; i++)
    for (int j = ia->arr[i]->s; j <= ia->arr[i]->e; j++)
      if (rs->data[j] == 'N')
	nm++;
      else
	nn++;
#+end_src
#+begin_src latex
  The array of unique intervals is now converted to the corresponding
  array of sequences. The templates are numbered and the fragment
  coordinates are included in the headers. Once the templates have been
  written, the interval array is freed. For debugging purposes, the
  program can also print the unique sequences.
#+end_src
#+begin_src C <<Prepare array of unique sequences, P. \ref{fur}>>=
  SeqArr *sa = newSeqArr();
  char name[1024];
  for (int i = 0; i < ia->n; i++) {
    Intv *iv = ia->arr[i];
    sprintf(name, "template_%d %d-%d\n", i + 1, iv->s + 1,
	    iv->e + 1);
    Seq *s = newSeq(name);
    //<<Copy sequence data, P. \ref{fur}>>
    seqArrAdd(sa, s);
  }
  freeIntvArr(ia);
  //<<Print unique sequences? P. \ref{fur}>>
#+end_src
#+begin_src latex
  After printing the unique sequences, the program exits.
#+end_src
#+begin_src C <<Print unique sequences? P. \ref{fur}>>=
  if (args->u) {
    for (int i = 0; i < sa->n; i++)
      printSeq(stdout, sa->arr[i], -1);
    exit(0);
  }
#+end_src
#+begin_src latex
  To copy the sequence data, memory is allocated, each nucleotide
  copied, and the sequence string terminated by the null character.
#+end_src
#+begin_src C <<Copy sequence data, P. \ref{fur}>>=
  s->data = emalloc(iv->e - iv->s + 2);
  for (int j = iv->s; j <= iv->e; j++)
    s->data[s->l++] = rs->data[j];
  s->data[s->l] = '\0';
#+end_src
#+begin_src latex
  The intervals in hand are candidates for template sequences. But
  before they are printed, they are reduced to those regions present in
  all targets and absent from all neighbors.

  \section{Intersect with Targets}
  At this point the template candidates come from a single target
  sequence, the representative. To ensure they also occur in all other
  targets, the templates are intersected with the remaining targets
  using a second external program,
  \texttt{phylonium}~\cite{klo20:phy}. \texttt{Phylonium} takes as input
  a set of sequences, one of which is designated the reference. In the
  context of \texttt{fur}, the reference is made up of the template
  candidates just identified. All contigs of the reference are
  concatenated. For example, in Figure~\ref{fig:int} the reference, $R$,
  consists of three unique candidate regions, $u_1$, $u_2$, and
  $u_3$. The remaining targets---$T_1$, $T_2$, and $T_3$ in the
  example---get aligned to $R$. Region $u_1$ now has overlapping matches
  from all three targets, region $u_2$ has matches from the three
  targets, but only those from $T_2$ and $T_3$ overlap, and region $u_3$
  has no match from $T_3$. The intersection between $R$ and $T_1$--$T_3$
  is formed by removing all positions with gaps, resulting in one
  template candidate, $c_1$.

  \begin{figure}
    \begin{center}
      \input{intersect}
    \end{center}
    \caption{Intersect unique regions and targets. The three unique
      regions, $\{u_1,u_2,u_3\}$ are concatenated to form the
      reference sequence, $R$. The target sequences, $\{T_1,T_2,T_3\}$
      are aligned to $R$ and the gapped positions removed to leave the
      candidate templates. In this cartoon there is only one such
      candidate, $c_1$.}\label{fig:int}
  \end{figure}
#+end_src
#+begin_src C <<Intersect with targets, P. \ref{fur}>>=
  //<<Write templates to file, P. \ref{fur}>>
  //<<Write targets to files, P. \ref{fur}>>
  //<<Run \texttt{phylonium}, P. \ref{fur}>>
  //<<Delete template and target files, P. \ref{fur}>>
  //<<Report result of intersection, P. \ref{fur}>>
  //<<Print ubiquitous templates and exit? P. \ref{fur}>>
#+end_src
#+begin_src latex
  The templates are written to the file \texttt{r.fasta} inside the
  database directory by iterating across the template array and printing
  headers and sequences.
#+end_src
#+begin_src C <<Write templates to file, P. \ref{fur}>>=
  tmpl = "%s/r.fasta";
  sprintf(name, tmpl, args->d);
  FILE *fp = efopen(name, "w");
  for (int i = 0; i < sa->n; i++)
    printSeq(fp, sa->arr[i], -1);
  fclose(fp);
#+end_src
#+begin_src latex
  The remaining targets are read from the BLAST database and written to
  individual files inside the database array. The program
  \texttt{blastdbcmd}, which is part of the BLAST package, allows access
  to BLAST databases. This adds a blank to the end of each header, which
  we remove again to ensure accurate identification later.
#+end_src
#+begin_src C  <<Write targets to files, P. \ref{fur}>>=
  in = 0;
  tmpl = "blastdbcmd -entry all -db %s/blastdb | sed 's/ $//'";
  sprintf(cmd, tmpl, args->d);
  pp = epopen(cmd, "r");
  //<<Iterate across BLAST database, P. \ref{fur}>>
  pclose(pp);
#+end_src
#+begin_src latex
  When iterating across the BLAST database, we avoid neighbors and the
  target representative.
#+end_src
#+begin_src C <<Iterate across BLAST database, P. \ref{fur}>>=
  while ((sp = getSeq(pp)) != NULL) {
    if (sp->name[0] == 't' && strcmp(sp->name, rn) != 0)  {
      sprintf(name, "%s/t%d.fasta", args->d, ++in);
      fp = efopen(name, "w");
      printSeq(fp , sp, -1);
      fclose(fp);
    }
    freeSeq(sp);
  }    
#+end_src
#+begin_src latex
  If there was at least one target in addition to the target
  representative, we run \texttt{phylonium}.  To do so, we construct and
  execute the appropriate command, then save the results. These consist
  of a set of FASTA entries with headers containing information about
  mutations in the fragments. The mutations are marked in the sequences
  to inform primer construction later.
#+end_src
#+begin_src C <<Run \texttt{phylonium}, P. \ref{fur}>>=
  if (in > 0) {
    //<<Construct and execute \texttt{phylonium} command, P. \ref{fur}>>
    //<<Save \texttt{phylonium} results, P. \ref{fur}>>
    //<<Mark mutations, P. \ref{fur}>>
  }
#+end_src
#+begin_src latex
  \texttt{Phylonium} is applied to the target files just constructed. It
  writes the intersection to the file \texttt{p.fasta}. All output to
  \texttt{stdout} or \texttt{stderr} is discarded.
#+end_src
#+begin_src C <<Construct and execute \texttt{phylonium} command, P. \ref{fur}>>=
  tmpl = "phylonium -p %s/p.fasta -r %s/r.fasta %s/*.fasta "
    "> /dev/null 2> /dev/null";
  sprintf(cmd, tmpl, args->d, args->d, args->d);
  if (system(cmd) < 0)
    error("couldn't run system call %s\n", cmd);
#+end_src
#+begin_src latex
  The intersecting sequence fragments in \texttt{p.fasta} are saved if
  long enough.
#+end_src
#+begin_src C <<Save \texttt{phylonium} results, P. \ref{fur}>>=
  sprintf(name, "%s/p.fasta", args->d);
  fp = efopen(name, "r");
  freeSeqArr(sa);
  sa = newSeqArr();
  while ((sp = getSeq(fp)) != NULL)
    if (sp->l >= args->n)
      seqArrAdd(sa, sp);
    else
      freeSeq(sp);
  fclose(fp);
#+end_src
#+begin_src latex
  \texttt{Phylonium} returns entries of the form
  \[
  \texttt{>part}_i\ (s..e)\ n\ p_1\ p_2\ ...\ p_n
  \]
  where $n$ is the number of mutations found at positions $p_1,
  p_2,...,p_n$. These positions are set to the unknown nucleotide,
  \texttt{N}, so they can later be avoided when designing primers.
#+end_src
#+begin_src C <<Mark mutations, P. \ref{fur}>>=
  for (int i = 0; i < sa->n; i++) {
    //<<Determine the number of mutations, P. \ref{fur}>>
    //<<Iterate across mutations, P. \ref{fur}>>
  }
#+end_src
#+begin_src latex
  The number of mutations is found by looking for the closing bracket of
  the fragment's interval. Using the \texttt{-x} option, the user can
  request only exact matches.
#+end_src
#+begin_src C <<Determine the number of mutations, P. \ref{fur}>>=
  char *h = strstr(sa->arr[i]->name, ")");
  h += 2;
  int j = atoi(strtok(h, " "));
  if (j == 0) {
    continue;
  } else if (args->x) {
    freeSeq(sa->arr[i]);
    sa->arr[i] = NULL;
    continue;
  }
#+end_src
#+begin_src latex
  The functions \texttt{strstr} for looking up the first occurrence of a
  character and \texttt{strtok} to iterate across string tokens are both
  declared in \texttt{string.h}.
#+end_src
#+begin_src C <<Include headers, P. \ref{fur}>>=
  #include <string.h>
#+end_src
#+begin_src latex
  All integers following the number of mutations are one-based
  positions.
#+end_src
#+begin_src C <<Iterate across mutations, P. \ref{fur}>>=
  char *t = strtok(NULL, " ");
  while (t != NULL) {
    int p = atoi(t) - 1;
    sa->arr[i]->data[p] = 'N';
    t = strtok(NULL, " ");
  }
#+end_src
#+begin_src latex
  The files used by \texttt{phylonium} are deleted.
#+end_src
#+begin_src C <<Delete template and target files, P. \ref{fur}>>=
  tmpl = "rm %s/*.fasta";
  sprintf(cmd, tmpl, args->d);
  if (system(cmd) < 0)
    error("couldn't run system call %s\n", cmd);
#+end_src
#+begin_src latex
  The user is told about the number of sequences, nucleotides, and
  \texttt{N}s in the targets.
#+end_src
#+begin_src C <<Report result of intersection, P. \ref{fur}>>=
  int ns = 0;
  nn = nm = 0;
  for (int i = 0; i < sa->n; i++) {
    if (!sa->arr[i]) continue;
    ns++;
    for (int j = 0; j < sa->arr[i]->l; j++)
      if (sa->arr[i]->data[j] == 'N') nm++;
      else nn++;
  }
  tmpl = "# Presence in targets        %6d     %8ld         %6d\n";
  fprintf(stderr, tmpl, ns, nn, nm);
#+end_src
#+begin_src latex
  The ubiquitous templates can be inspected.
#+end_src
#+begin_src C <<Print ubiquitous templates and exit? P. \ref{fur}>>=
  if (args->U) {
    for (int i = 0; i < sa->n; i++)
      if (sa->arr[i])
	printSeq(stdout, sa->arr[i], -1);
    exit(0);
  }
#+end_src
#+begin_src latex
  \section{Subtract Neighbors}
  Any neighbor sequences still present among the remaining templates are
  removed (subtracted) using a third external program,
  \texttt{blastn}~\cite{alt97:gap}. The candidate templates are searched
  in the BLAST database and the hits written to file. This file is read
  back into \texttt{fur}, and the regions with homologs among the
  neighbors are again set to \texttt{N}, unless the ``exact'' option,
  \texttt{-x}, is set.
#+end_src
#+begin_src C <<Subtract neighbors, P. \ref{fur}>>=
  //<<Search neighbors, P. \ref{fur}>>
  //<<Mark regions found among neighbors, P. \ref{fur}>>
  //<<Report result of subtraction, P. \ref{fur}>>
#+end_src
#+begin_src latex
  The neighbors are searched by constructing the \texttt{blastn} pipe
  and then running the neighbor sequences through it.
#+end_src
#+begin_src C <<Search neighbors, P. \ref{fur}>>=
  //<<Construct neighbor pipe, P. \ref{fur}>>
  //<<Write templates to neighbor pipe, P. \ref{fur}>>
#+end_src
#+begin_src latex
  In the neighbor pipe we write the subject accession and query
  coordinates to the output file, \texttt{o.txt}, inside the database
  directory. By default BLAST is run in the slower and more sensitive
  ``blastn'' mode, but the user can switch to the faster and less
  sensitive ``megablast'' mode.
#+end_src
#+begin_src C <<Construct neighbor pipe, P. \ref{fur}>>=
  tmpl = "blastn -task %s -db %s/blastdb -num_threads %d "
    "-evalue %e -outfmt \"6 sacc qacc qstart qend\" "
    "| grep '^n' > "
    "%s/o.txt";
  if(args->m)
    sprintf(cmd, tmpl, "megablast", args->d, args->t, args->e, args->d);
  else
    sprintf(cmd, tmpl, "blastn", args->d, args->t, args->e, args->d);
  pp = epopen(cmd, "w");
#+end_src
#+begin_src latex
  The template candidates are written to this pipe with their index
  numbers as identifiers.
#+end_src
#+begin_src C <<Write templates to neighbor pipe, P. \ref{fur}>>=
  for (int i = 0; i < sa->n; i++)
    if (sa->arr[i])
      fprintf(pp, ">%d\n%s\n", i, sa->arr[i]->data);
  pclose(pp);
#+end_src
#+begin_src latex
  BLAST may return overlapping regions. These are summarized before
  marking them.
#+end_src
#+begin_src C <<Mark regions found among neighbors, P. \ref{fur}>>=
  tmpl = "%s/o.txt";
  sprintf(name, tmpl, args->d);
  fp = efopen(name, "r");
  //<<Summarize neighbor BLAST output, P. \ref{fur}>>
  fclose(fp);
  //<<Set homologous neighbor regions to N, P. \ref{fur}>>
  //<<Free BLAST resources, P. \ref{fur}>>
#+end_src
#+begin_src latex
  To summarize the output of the BLAST search among neighbors, space for
  the results is created before the results themselves are scanned.
#+end_src
#+begin_src C <<Summarize neighbor BLAST output, P. \ref{fur}>>=
  //<<Allocate space for output of neighbor BLAST, P. \ref{fur}>>
  //<<Scan output of neighbor BLAST, P. \ref{fur}>>
#+end_src
#+begin_src latex
  We allocate space for the start and end positions of each homologous
  regions and initialize these to values that allow us to later
  summarize overlapping intervals.
#+end_src
#+begin_src C <<Allocate space for output of neighbor BLAST, P. \ref{fur}>>=
  int *start = emalloc(sa->n * sizeof(int));
  int *end   = emalloc(sa->n * sizeof(int));
  for (int i = 0; i < sa->n; i++) {
    start[i] = INT_MAX;
    end[i]   = -1;
  }
#+end_src
#+begin_src latex
  \texttt{INT\_MAX} is the maximum value an integer may take and is
  defined in \texttt{limits.h}.
#+end_src
#+begin_src C <<Include headers, P. \ref{fur}>>=
  #include <limits.h>
#+end_src
#+begin_src latex
  During the scan of the BLAST output, intervals are extended to the
  left and the right.
#+end_src
#+begin_src  C <<Scan output of neighbor BLAST, P. \ref{fur}>>=
  int ii, qs, qe;
  char s[32];
  while (fscanf(fp, "%s %d %d %d", s, &ii, &qs, &qe) != EOF) {
    if (qs < start[ii])
      start[ii] = qs ;
    if (qe > end[ii])
      end[ii] = qe;
  }
#+end_src
#+begin_src latex
  The regions with homology among the neighbors are set to \texttt{N},
  bearing in mind that BLAST-coordinates are 1-based, character arrays
  0-based. As the arrays with the start and end coordinates are not
  needed any more afterwards, they are freed.
#+end_src
#+begin_src C <<Set homologous neighbor regions to N, P. \ref{fur}>>=
  for (int i = 0; i < sa->n; i++) {
    int l = end[i] - start[i] + 1;
    if (l > 0 && args->x) {
      freeSeq(sa->arr[i]);
      sa->arr[i] = NULL;
      continue;
    }
    for (int j = start[i] - 1; j < end[i]; j++)
      sa->arr[i]->data[j] = 'N';
  }
#+end_src
#+begin_src latex
  The resources used up by the BLAST run, the output file and the arrays
  of start and end positions, are freed again.
#+end_src
#+begin_src C <<Free BLAST resources, P. \ref{fur}>>=
  tmpl = "rm %s/o.txt";
  sprintf(cmd, tmpl, args->d);
  if (system(cmd) < 0) {
    fprintf(stderr, "couldn't run system call %s\n", cmd);
    exit(0);
  }
  free(start);
  free(end);
#+end_src
#+begin_src latex
  In order to report the results of the subtraction step, we iterate
  over all residues in all sequences and count the number of
  mutations. At this point we can also classify the sequences into those
  fit for subsequent analysis and those that aren't.
#+end_src
#+begin_src C  <<Report result of subtraction, P. \ref{fur}>>=
  nn = nm = ns = 0;
  for (int i = 0; i < sa->n; i++) {
    if (!sa->arr[i]) continue;
    //<<Count mutations, P. \ref{fur}>>
    //<<Classify sequences, P. \ref{fur}>>
  }
  tmpl = "# Absence from neighbors     %6d     %8ld         %6d\n";
  fprintf(stderr, tmpl, ns, nn, nm);
#+end_src
#+begin_src latex
  The mutations are counted by again looking at every residue in the
  current result set. An \texttt{N} is counted as a mutation, everything
  else as a nucleotide.
#+end_src
#+begin_src C <<Count mutations, P. \ref{fur}>>=
  int cn = 0, cm = 0;
  for (int j = 0; j < sa->arr[i]->l; j++)
    if (sa->arr[i]->data[j] == 'N')
      cm++;
    else
      cn++;
#+end_src
#+begin_src latex
  Sequences are classified as fit for printing if they contain enough
  nucleotides.
#+end_src
#+begin_src C <<Classify sequences, P. \ref{fur}>>=
  if (cn >= args->n) {
    ns++;
    nm += cm;
    nn += cn;
  } else {
    freeSeq(sa->arr[i]);
    sa->arr[i] = NULL;
  }
#+end_src
#+begin_src latex
  The last step in \texttt{fur} is to print the template sequences just
  identified.
#+end_src
#+begin_src C <<Print templates, P. \ref{fur}>>=
  for (int i = 0; i < sa->n; i++)
    if (sa->arr[i])
      printSeq(stdout, sa->arr[i], -1);
  freeSeqArr(sa);
#+end_src
#+begin_src latex
  To check the output of \texttt{fur} in the Tutorial
  (Section~\ref{sec:furTut}), we write the AWK script \texttt{count}. It
  counts the headers and sums the sequence lengths before reporting the
  number of templates and nucleotides.
    \begin{prog}[\texttt{count}]\label{count}
      \textcolor{white}{}
#+end_src
#+begin_src awk <<count>>=
  #!/usr/bin/awk -f
  {
    if (/^>/)
      c++
    else {
      t += length($1)
      n += gsub("N", "")
    }
  }
  END {
    printf "# %s tmpl, %d nuc, %d N, %d total\n", c, t - n, n, t
  }
#+end_src
#+begin_src latex
  \end{prog}
  \texttt{Fur} is now ready to be used.
#+end_src
