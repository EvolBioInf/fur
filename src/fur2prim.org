#+begin_src latex
  \section{Introduction}
  Primers are designed in several steps. First, \texttt{fur} identifies
  diagnostic regions in a template sequence. Then a program for
  designing primers, for example \texttt{primer3} is used to find primer
  pairs in the diagnostic regions. However, converting the output of
  \texttt{fur} to \texttt{primer3} input can be tricky and
  \texttt{fur2prim.awk} is designed to automate this.

  \section{Implementation}
  \texttt{fur2prim.awk} reads \texttt{fur} output and prints a text file
  for driving a \texttt{primer3} run. The program first prints a usage
  message, if so desired, and then the \texttt{primer3} input.
  \begin{prog}[\texttt{fur2prim.awk}]\label{fur2prim}
    \textcolor{white}{}
#+end_src
#+begin_src awk <<fur2prim.awk>>=
  #!/usr/bin/awk -f
  BEGIN {
    <<Print usage, P.~\ref{fur2prim}>>
  }
  {
    <<Parse template sequence, P.~\ref{fur2prim}>>
  }
#+end_src
#+begin_src latex
  \end{prog}
  There is no mandatory input, but there are a number of parameters like
  oligo and product length, and melting temperature to be specified as
  we work through the implementation. These can be specified by the user
  or left in their default state.
#+end_src
#+begin_src awk <<Print usage, P.~\ref{fur2prim}>>=
  <<Define default parameter values, P.~\ref{fur2prim}>>
  if (h || help) {
    print "fur2prim.awk: Convert fur output to primer3 input"
    print "Usage: fur2prim.awk furOutput.fasta"
    <<Query parameter values, P.~\ref{fur2prim}>>
    exit
  }
  <<Assign parameter values, P.~\ref{fur2prim}>>
#+end_src
#+begin_src latex
    The \texttt{fur} output consists of FASTA formatted unique regions
    extracted from the target representative. For each unique region a
    \texttt{primer3} entry is printed terminated by \verb+=+.
#+end_src
#+begin_src awk <<Parse template sequence, P.~\ref{fur2prim}>>=
  if (/^>/) {
    if (n) {
      <<Print \texttt{primer3} input, P.~\ref{fur2prim}>>
      print "="
    }
    seq = ""
    n++
  } else
    seq = seq $0
#+end_src
#+begin_src latex
  The input for \texttt{primer3} consists of two parts, one constant,
  the other variable.
#+end_src
#+begin_src awk <<Print \texttt{primer3} input, P.~\ref{fur2prim}>>=
  <<Print constant \texttt{primer3} input, P.~\ref{fur2prim}>>
  <<Print variable \texttt{primer3} input, P.~\ref{fur2prim}>>
#+end_src
#+begin_src latex
  In the constant input we request the construction of pairs of primers,
  each augmented by an internal oligo.
#+end_src
#+begin_src awk <<Print constant \texttt{primer3} input, P.~\ref{fur2prim}>>=
  print "PRIMER_TASK=generic"
  print "PRIMER_PICK_LEFT_PRIMER=1"
  print "PRIMER_PICK_RIGHT_PRIMER=1"
  print "PRIMER_PICK_INTERNAL_OLIGO=1"
#+end_src
#+begin_src latex
  The variable input concerns first of all the primer and product size.
#+end_src
#+begin_src awk <<Print variable \texttt{primer3} input, P.~\ref{fur2prim}>>=
  printf "PRIMER_MIN_SIZE=%d\n", primMinSize
  printf "PRIMER_MAX_SIZE=%d\n", primMaxSize
  printf "PRIMER_PRODUCT_SIZE_RANGE=%d-%d\n", prodMinSize, prodMaxSize
  printf "PRIMER_MIN_TM=%.1f\nf", primMinTm
  printf "PRIMER_MAX_TM=%.1f\n", primMaxTm
  printf "PRIMER_INTERNAL_MIN_TM=%.1f\n", inMinTm
  printf "PRIMER INTERNAL_MAX_TM=%.1f\n", inMaxTm
#+end_src
#+begin_src latex
  At the beginning of the program these parameters are given default values.
#+end_src
#+begin_src awk <<Define default parameter values, P.~\ref{fur2prim}>>=
  defPrimMinSize = 15
  defPrimMaxSize = 25
  defProdMinSize = 70
  defProdMaxSize = 150
  defPrimMinTm = 54
  defPrimMaxTm = 58
  defInMinTm = 43
  defInMaxTm = 47
#+end_src
#+begin_src latex
  Later, they are queried.
#+end_src
#+begin_src awk <<Query parameter values, P.~\ref{fur2prim}>>=
  printf "\t[-v primMinSize=<S>; default: %d]\n",  defPrimMinSize
  printf "\t[-v primMaxSize=<S>; default: %d]\n",  defPrimMaxSize
  printf "\t[-v prodMinSize=<S>; default: %d]\n",  defProdMinSize
  printf "\t[-v prodMaxSize=<S>; default: %d]\n",  defProdMaxSize
  printf "\t[-v primMinTm=<T>; default: %.1f]\n", defPrimMinTm
  printf "\t[-v primMaxTm=<T>; default: %.1f]]\n", defPrimMaxTm
  printf "\t[-v inMinTm=<T>; default: %.1f]\n", defInMinTm
  printf "\t[-v inMaxTm=<T>; default: %.1f]\n", defInMaxTm
#+end_src
#+begin_src latex
  Finally, any undefined parameter is assigned its default value.
#+end_src
#+begin_src awk <<Assign parameter values, P.~\ref{fur2prim}>>=
  if (!primMinSize) primMinSize = defPrimMinSize
  if (!primMaxSize) primMaxSize = defPrimMaxSize
  if (!prodMinSize) prodMinSize = defProdMinSize
  if (!prodMaxSize) prodMaxSize = defProdMaxSize
  if (!primMinTm) primMinTm = defPrimMinTm
  if (!primMaxTm) primMaxTm = defPrimMaxTm
  if (!inMinTm) inMinTm = defInMinTm
  if (!inMaxTm) inMaxTm = defInMaxTm
#+end_src
#+begin_src latex
  Finally, the template sequence is appended to the \texttt{primer3}
  input.
#+end_src
#+begin_src awk <<Print variable \texttt{primer3} input, P.~\ref{fur2prim}>>=
  printf "SEQUENCE_TEMPLATE=%s\n", seq
#+end_src
