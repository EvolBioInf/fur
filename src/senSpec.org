#+begin_src latex
  \section{Introduction}
  Given a set of templates proposed by \texttt{fur}, we'd like to know
  how many of the nucleotides were found among the targets compared to
  how many should have been found. This is called the
  \emph{sensitivity} \cite[p. 121f]{hau06:int}:
  \begin{equation}\label{eq:sn}
  S_{\rm n} = \frac{t_{\rm p}}{t_{\rm p} + f_{\rm n}},
  \end{equation}
  where $t_{\rm p}$ is the number of true positives---the number of
  nucleotides hit---and $f_{\rm n}$ the number of targets
  that should have been but weren't.

  We'd also like to compare the number of nucleotides in target hits to
  the number of nucleotides in neighbor hits, which is called the
  \emph{specificity}:
  \begin{equation}\label{eq:sp}
  S_{\rm p} = \frac{t_{\rm p}}{t_{\rm p} + f_{\rm p}},
  \end{equation}
  where $f_{\rm p}$ is the number false positive nuleotides.

  $S_{\rm n}$ and $S_{\rm p}$ are bounded by 0 and 1, the greater they
  both are, the better. However, there is no gain in maximizing just one
  of them at the expense of the other, so their correlation is often
  used to measure classification accuracy \cite[p. 122]{hau06:int}:
  \begin{equation}\label{eq:c}
  C=\frac{t_{\rm p}t_{\rm n}-f_{\rm p}f_{\rm n}}{\sqrt{(t_{\rm p}+f_{\rm
    p})(t_{\rm n}+f_{\rm n})(t_{\rm n}+f_{\rm p})(t_{\rm p}+f_{\rm n})}}.
  \end{equation}

  $C$ ranges between -1 and 1, with 1 indicating perfect
  classification---all targets and no neighbors are hit---0 indicates no
  discrimination, and -1 perfect anti-classification, where all
  neighbors are hit and no targets. When comparing the results of a
  \texttt{fur} run to the underlying database, the sensitivity, the
  specificity, and their correlation should be 1.

  \section{Implementation}
  The program \texttt{senSpec.awk} takes as input a query consisting of
  the set of template sequences computed by \texttt{fur} and a
  \texttt{fur} database. It returns the specificity, sensitivity, and
  correlation of that \texttt{fur} run.

  Initially the user is prompted for input, before the query lengths are
  saved. Then the number of targets and neighbors is computed. This is
  followed by counting the true positive nucleotides, $t_{\rm p}$, and
  their complement, the false negative nucleotides, $f_{\rm n}$. Then we
  count the false positive nucleotides, $f_{\rm p}$, and their
  complement, the true negative nucleotides, $t_{\rm n}$. At the end,
  the sensitivity, $S_{\rm n}$, the specificity, $S_{\rm p}$, and their
  correlation, $C$, are printed.

  \begin{prog}[\texttt{senSpec.awk}]\label{senSpec}
    \textcolor{white}{}
#+end_src
#+begin_src awk <<senSpec.awk>>=
  #!/usr/bin/awk -f
  BEGIN {
    <<Interact with user, P. \ref{senSpec}>>
    <<Save query lengths, P. \ref{senSpec}>>
    <<Count targets, P. \ref{senSpec}>>
    <<Count neighbors, P. \ref{senSpec}>>
    <<Compute $t_{\rm p}$ and $f_{\rm n}$, P. \ref{senSpec}>>
    <<Compute $f_{\rm p}$ and $t_{\rm n}$, P. \ref{senSpec}>>
    <<Print $S_{\rm n}$, $S_{\rm p}$, and $C$, P. \ref{senSpec}>>
  }
#+end_src
#+begin_src latex
  \end{prog}
  The user is prompted for a set of query sequences and the name of a
  \texttt{fur} database.
#+end_src
#+begin_src awk <<Interact with user, P. \ref{senSpec}>>=
  defEvalue = 1e-5
  if (!query || !db) {
    print  "Usage: senSpec.awk -v query=<query.fasta> -v db=<furDb>"
    printf "\t[-v evalue=<evalue>; default: %.1e]\n", defEvalue
    exit
  }
  if (!evalue)
    evalue = defEvalue
#+end_src
#+begin_src latex
  The query lengths are saved by traversing the query file.
#+end_src
#+begin_src awk <<Save query lengths, P. \ref{senSpec}>>=
  cmd = "cat " query
  while (cmd | getline) {
    if (/^>/) {
      h = $1;
      sub(">", "", h)
      ql[h] = 0
    } else
      ql[h] += length($0)
  }
#+end_src
#+begin_src latex
  The targets are counted by filtering for them in the BLAST part of the
  \texttt{fur} database.
#+end_src
#+begin_src awk <<Count targets, P. \ref{senSpec}>>=
  tmpl = "blastdbcmd -entry all -db %s/blastdb | grep -c '^>%s'"
  cmd = sprintf(tmpl, db, "t")
  cmd | getline
  nt = $1
  close(cmd)
#+end_src
#+begin_src latex
  The neighbors are counted in a similar way.
#+end_src
#+begin_src awk <<Count neighbors, P. \ref{senSpec}>>=
  cmd = sprintf(tmpl, db, "n")
  cmd | getline
  nn = $1
  close(cmd)
#+end_src
#+begin_src latex
  To count the true positive and false negative nucleotides, we run a
  BLAST and traverse its results before computing the individual
  statistics.
#+end_src
#+begin_src awk  <<Compute $t_{\rm p}$ and $f_{\rm n}$, P. \ref{senSpec}>>=
  <<Construct BLAST command, P. \ref{senSpec}>>
  <<Traverse BLAST results, P. \ref{senSpec}>>
  <<Compute $t_{\rm p}$, P. \ref{senSpec}>>
  <<Compute $f_{\rm n}$, P. \ref{senSpec}>>		      
#+end_src
#+begin_src latex
  The BLAST search returns four values:
  \begin{enumerate}
  \item \texttt{sacc}: Subject accession
  \item \texttt{qacc}: Query accession
  \item \texttt{qstart}: Query start in alignment
  \item \texttt{qlen}: Query end in alignment
  \end{enumerate}
  They are first filtered for \emph{targets} and then sorted by subject,
  query, and query start, in that order.
#+end_src
#+begin_src awk <<Construct BLAST command, P. \ref{senSpec}>>=
  tmpl = "blastn -outfmt \"6 sacc qacc qstart qend\" "
  tmpl = tmpl "-task blastn -query %s -db %s/blastdb -evalue %s "
  tmpl = tmpl "| awk '$1 ~ /^%s/' "
  tmpl = tmpl "| sort -k 1,1 -k 2,2 -k 3,3n"
  cmd = sprintf(tmpl, query, db, evalue, "t")
#+end_src
#+begin_src latex
  During traversal of the BLAST results, we sum the number of
  nucleotides hit one or more times in the subject.
#+end_src
#+begin_src awk  <<Traverse BLAST results, P. \ref{senSpec}>>=
  s = 0
  qstart = 0
  qend = -1
  while (cmd | getline) {
    //<<Analyze BLAST hit, P. \ref{senSpec}>>
  }
  close(cmd)
#+end_src
#+begin_src latex
  Each BLAST hit either extends an existing interval on the query or
  starts a new interval. Starting a new interval implies closure of a
  previous one, at which point the number of nucleotides contained in
  that interval is added to the sum.
#+end_src
#+begin_src awk <<Analyze BLAST hit, P. \ref{senSpec}>>=
  if (sacc == $1 && qacc == $2) {
    if ($3 <= qend && $4 > qend)
      qend = $4
  } else {
    s += qend - qstart + 1
    sacc = $1
    qacc = $2
    qstart = $3
    qend = $4
  }
#+end_src
#+begin_src latex
  To compute the final value of $t_{\rm p}$, we take the sum so far and
  add the nucleotides from the last BLAST hit.
#+end_src
#+begin_src awk <<Compute $t_{\rm p}$, P. \ref{senSpec}>>=
  tp = s + qend - qstart + 1
#+end_src
#+begin_src latex
  The count of false negatives nucleotides is the difference between the
  observed $t_{\rm p}$ and its maximum value.
#+end_src
#+begin_src awk <<Compute $f_{\rm n}$, P. \ref{senSpec}>>=
  for (a in ql)
    m += ql[a] * nt
  fn = m - tp
#+end_src
#+begin_src latex
  To compute the false positive and true negative nucleotides, we first
  construct the BLAST command to filter for \emph{neighbors}, parse its
  results, and then compute the desired quantities.
#+end_src
#+begin_src awk <<Compute $f_{\rm p}$ and $t_{\rm n}$, P. \ref{senSpec}>>=
  cmd = sprintf(tmpl, query, db, evalue, "n")
  <<Traverse BLAST results, P. \ref{senSpec}>>
  <<Compute $f_{\rm p}$, P. \ref{senSpec}>>
  <<Compute $t_{\rm n}$, P. \ref{senSpec}>>
#+end_src
#+begin_src latex
  The false positive nucleotides are the sum coming out of the traversal
  of the BLAST results plus the nucleotides in the last hit.
#+end_src
#+begin_src awk <<Compute $f_{\rm p}$, P. \ref{senSpec}>>=
  fp = s + qend - qstart + 1
#+end_src
#+begin_src latex
  The true negatives are the difference to the maximum value $f_{\rm p}$
  could take.
#+end_src
#+begin_src awk <<Compute $t_{\rm n}$, P. \ref{senSpec}>>=
  m = 0
  for (a in ql)
    m += ql[a] * nn
  tn = m - fp
#+end_src
#+begin_src latex
  Now we use equation~(\ref{eq:sn}) to compute the sensitivity,
  equation~(\ref{eq:sp}) for the specificity, and equation~(\ref{eq:c})
  for their correlation.
#+end_src
#+begin_src awk <<Print $S_{\rm n}$, $S_{\rm p}$, and $C$, P. \ref{senSpec}>>=
  sn = tp / (tp + fn)
  sp = tp / (tp + fp)
  d = tp * tn - fp * fn
  n = (tp + fp) * (tn + fn) * (tn + fp) * (tp + fn)
  n = sqrt(n)
  c  = d / n
  print "#S_n\tS_p\tC"
  printf "%.3f\t%.3f\t%.3f\n", sn, sp, c
#+end_src
