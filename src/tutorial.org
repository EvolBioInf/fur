#+begin_src latex  
  \section{\texttt{fur}}\label{sec:furTut}
    To demonstrate \texttt{fur}, it is used to find regions specific to
    the pathogenic \emph{E. coli} strain ST131 in the example data shown
    in Figure~\ref{fig:eco}.  The first step is to get the data. This is
    converted into a \texttt{fur} database and analyzed in an initial pass
    before the investigation is refined by varying the parameters of
    \texttt{fur}.
    \begin{prog}[\texttt{furTut.sh}]\label{furTut}
      \textcolor{white}{}
#+end_src
#+begin_src sh <<furTut.sh>>=
  <<Get tutorial data, P. \ref{furTut}>>
  <<Make fur database, P. \ref{furTut}>>
  <<Analyze tutorial data, P. \ref{furTut}>>
  <<Refine tutorial analysis, P. \ref{furTut}>>
#+end_src
#+begin_src latex
  \end{prog}
  The example data is copied from a networked computer and unpacked.
#+end_src
#+begin_src sh <<Get tutorial data, P. \ref{furTut}>>=
  wget guanine.evolbio.mpg.de/fur/eco105.tar.gz
  tar -xvzf eco105.tar.gz
#+end_src
#+begin_src latex
  This generates two directories of genomes in FASTA format,
  \texttt{targets} with 98 genomes, and \texttt{neighbors} with
  seven. These are converted to a \texttt{fur} database using
  \texttt{makeFurDb}  (Chapter~\ref{ch:makeFurDb}),
  which takes approximately half a minute.
#+end_src
#+begin_src sh <<Make fur database, P. \ref{furTut}>>=
  makeFurDb -t targets -n neighbors -d furDb
#+end_src
#+begin_src latex
  Unique templates are found by applying \texttt{fur} to this database,
  which takes roughly fifteen seconds. The template sequences are stored
  in \texttt{tmpl.fasta}.
#+end_src
#+begin_src sh <<Analyze tutorial data, P. \ref{furTut}>>=
  fur -d furDb > tmpl.fasta
  # Step                    Sequences  Nucleotides  Mutations (N)
  # -------------------------------------------------------------
  # Sliding window               1005       681264              0
  # Presence in targets           170        69407            151
  # Absence from neighbors         91        46844           4309
#+end_src
#+begin_src latex
  The hash-tagged progress information lists the three steps of the
  algorithm and the number of sequences and nucleotides contained in the
  template set after each one. So the initial sliding window analysis
  uncovers 1005 sequences totaling 681.3 kb and containing no unknown
  nucleotide, \texttt{N}. After checking for presence in the targets,
  170 sequences with 69.4 kb remain. This step is carried out by
  intersecting the result of the previous step with the targets using
  \texttt{phylonium} (Figure~\ref{fig:int}). Here the matches between
  the reference sequence and the targets may contain mutations. Hence
  our result set is now sprinkled with 151 mutations (\texttt{N}s). The
  final step of subtracting the neighbors leaves 91 sequences with 46.8
  kb as the template set. In this step BLAST hits are set to \texttt{N},
  hence the number of ``mutations'' has now grown to 4309. That is, 4.3
  kb of \texttt{N} in addition to 46.8 kb of non-\texttt{N}.

  The file \texttt{tmpl.fasta} consists of headers followed by sequence
  data. Each header in turn consists of a name and the start and end
  positions on the target representative. Get the first ten lines of
  \texttt{tmpl.fasta}. 
#+end_src
#+begin_src sh <<Analyze tutorial data, P. \ref{furTut}>>=
  head tmpl.fasta
#+end_src
#+begin_src latex
  They happen to be:
  \begin{verbatim}
  >part9	(1436..1926)  2
  CCCGGATTACAGTTCATAGGGTGTGACGACACTATCTCTCGTATTCCGCGTTACCTCCTCAAGCTATGCC
  GCCAGTGCCTGTTTGGCCTCAATTTTCACGCTGAGAAAATCGATAAGGATATCGATATCAAATAGCCAAA
  TCTTTTTGCCATTACCATTTCTCGCGCAGCTTACGCNGGTATTCGACACCATCTTCCTCACACCCTTGCC
  AGATGCCAGGAACACTGGTTCTTGCTGTTTGCGATTGATTTACCAGGTATTGATCTACCGCTTCCCGTAA
  TAGGTCTGCACGCGGAAGATTACGCTGCACCTCAANATCATCAAGTTGCTTAATCACCTCATTCGATAAA
  TCGAGTAAAATTCTGCTCATATCCATACCTGCCAGAGGGTTCATAAATATCTCGCCAATATCATTTTGAA
  TCTATGGAGAGAAAAGTACCCTTGTCGAATCTTTAAAGAAAGCGCATTTACGCATCACTTTTTATTTTTG
  >part10	(3700..3958)  0
  GTCCAGATACAGCTTTTGATAGTTTATTATCCTGGATGATATCAGGAGCGATATCTATAAAGTTTATGCA
  \end{verbatim}

  The header consists of a name, coordinates within the concatenated
  reference sequence, and the number of mutations.

  The file \texttt{tmpl.fasta} is supposed to contain 91 sequences
  with 46844 nucleotides, 4309 \texttt{N}, totaling $46844 + 4309 =
  51153$ residues. To check this is actually the case, we use our
  progam \texttt{count} to find the expected 91 templates with a total
  of 51.2 kb.
#+end_src
#+begin_src sh <<Analyze tutorial data, P. \ref{furTut}>>=
  count tmpl.fasta 
  # 91 tmpl, 46844 nuc, 4309 N, 51153 total
#+end_src
#+begin_src latex
  To make the process of template selection more transparent, the
  \texttt{-u} option allows printing of the unique regions found in the
  sliding window analysis before exiting.
#+end_src
#+begin_src sh <<Refine tutorial analysis, P. \ref{furTut}>>=
  fur -d furDb -u > unique1.fasta
  # Step                    Sequences  Nucleotides  Mutations (N)
  # -------------------------------------------------------------
  # Sliding window               1005       681264              0
#+end_src
#+begin_src latex
  The file \texttt{unique1.fasta} now contains 1005 sequences with
  681,264, which is checked again.
#+end_src
#+begin_src sh <<Refine tutorial analysis, P. \ref{furTut}>>=
  count unique1.fasta
  # 1005 tmpl, 681264 nuc, 0 N, 681264 total
#+end_src
#+begin_src latex
  Similarly, the 170 regions present in all targets can be inspected
  using the \texttt{-U} option.
#+end_src
#+begin_src sh <<Refine tutorial analysis, P. \ref{furTut}>>=
  fur -d furDb -U > unique2.fasta
  # Step                    Sequences  Nucleotides  Mutations (N)
  # -------------------------------------------------------------
  # Sliding window               1005       681264              0
  # Presence in targets           170        69407            151
#+end_src
#+begin_src latex
  Check that \texttt{unique2.fasta} contains 170 sequences with $69407 +
  151 = 69558$ bp.
#+end_src
#+begin_src sh <<Refine tutorial analysis, P. \ref{furTut}>>=
  count unique2.fasta
  # 170 tmpl, 69407 nuc, 151 N, 69558 total
#+end_src
#+begin_src latex
  Three \texttt{fur} parameters are of interest. The first is the window
  length; the other two affect the sensitivity of the BLAST run, which
  can be modulated via its mode (algorithm) and $E$-value. Let's begin
  with the window length, which by default is 80 bp. Much longer windows
  result in sequences that are more difficult to find among all
  targets. For example, with 1 kb windows, there are 111 candidate
  regions, of which 26 are present in all targets. The final tally is 18
  regions with 18027 nucleotides and 2990 \texttt{N}. So the final yield
  is quite different in spite of the fact that the amount of nucleotides
  returned from the sliding window analysis, 635 kb, is similar to the
  681 kb found with 80 bp windows.
#+end_src
#+begin_src sh <<Refine tutorial analysis, P. \ref{furTut}>>=
  fur -d furDb -w 1000 > tmpl.fasta
  # Step                    Sequences  Nucleotides  Mutations (N)
  # -------------------------------------------------------------
  # Sliding window                111       634900              0
  # Presence in targets            26        28730            108
  # Absence from neighbors         18        18027           2990
#+end_src
#+begin_src latex
  On the other hand, a small increase in window length to 90 bp happens
  to yield 174 templates with 53.6 kb. Clearly, \texttt{fur} is highly
  sensitive to the window length and this should be borne in mind when
  investigating other pathogens.
#+end_src
#+begin_src sh <<Refine tutorial analysis, P. \ref{furTut}>>=
  fur -d furDb -w 90 > tmpl.fasta
  # Step                    Sequences  Nucleotides  Mutations (N)
  # -------------------------------------------------------------
  # Sliding window               1610       609930              0
  # Presence in targets           246        72184            167
  # Absence from neighbors        174        53570           2922
#+end_src
#+begin_src latex
  The second parameter we explore is the mode of the BLAST-search among
  the neighborhood sequences. By default this is the sensitive
  ``blastn'' mode. Option \texttt{-m} switches it to the faster and less
  sensitive ``megablast'' mode.  This increases the yield from
  originally 91 fragments with 48.8 kb to 168 fragments with 69.0 kb, a
  40\% jump, because fewer matches between candidates and neighbors are
  found. However, the remaining candidates might now be less specific.
#+end_src
#+begin_src sh <<Refine tutorial analysis, P. \ref{furTut}>>=
  fur -d furDb -m > tmpl.fasta
  # Step                    Sequences  Nucleotides  Mutations (N)
  # -------------------------------------------------------------
  # Sliding window               1005       681264              0
  # Presence in targets           170        69407            151
  # Absence from neighbors        168        69052            137
#+end_src
#+begin_src latex
  The third and last parameter we explore is the $E$-value of the
  BLAST-search, which is $10^{-5}$ by default. When decreased to, say,
  $10^{-20}$, the yield increases from 91 fragments / 46.8 kb to 102
  fragments / 50.5 kb. Again, the candidates might now have lower
  specificity.
#+end_src
#+begin_src sh <<Refine tutorial analysis, P. \ref{furTut}>>=
  fur -d furDb -e 1e-20 > tmpl.fasta
  # Step                    Sequences  Nucleotides  Mutations (N)
  # -------------------------------------------------------------
  # Sliding window               1005       681264              0
  # Presence in targets           170        69407            151
  # Absence from neighbors        102        50516           2573
#+end_src
#+begin_src latex
  So it could be important to vary the window length (\texttt{-w}), the
  $E$-value (\texttt{-e}), and the mode in your own analyses. This can
  be done conveniently, as each run of \texttt{fur} is reasonably fast
  once the underlying database has been computed.

  \section{Test Sensitivity and Specificity, \texttt{senSpec}}
  The sensitivity and specificity of the markers proposed by
  \texttt{fur} can be calculated by \texttt{senSpec}.
  (Section~\ref{ch:senSpec}). The sequences are cleaned first, and then
  evaluated.
#+end_src
#+begin_src sh <<Refine tutorial analysis, P. \ref{furTut}>>=
  cleanSeq tmpl.fasta > tmpl2.fasta
  senSpec -v query=tmpl2.fasta -v db=furDb
  #S_n	S_p	C
  1.000   0.995   0.962
#+end_src
#+begin_src latex
  Given that we are testing on the same data from which the templates
  were extracted, it is not surprising that all three quality scores are
  very high. Think of this as a positive control. A more interesting test
  would be on a database of sequences not used in template discovery.

  \section{Making Primers, \texttt{fur2prim} \& \texttt{prim2fasta}}
  Each template is now converted to an entry in the input to
  \texttt{primer3}.
#+end_src
#+begin_src sh <<Refine tutorial analysis, P. \ref{furTut}>>=
  fur2prim tmpl.fasta > prim.txt
#+end_src
#+begin_src latex
  The command-line version of \texttt{primer3} is run on the input file
  just created.
#+end_src
#+begin_src sh <<Refine tutorial analysis, P. \ref{furTut}>>=
  primer3_core prim.txt > prim.out
#+end_src
#+begin_src sh <<Refine tutorial analysis, P. \ref{furTut}>>=
  prim2fasta -v file=primer prim.out 
#+end_src
#+begin_src latex
  This generates the primer files
  \begin{verbatim}
  primer1.fasta
  primer2.fasta
  ...
  primer510.fasta 
  \end{verbatim}

  This is perhaps a bit too much. So instead of extracting all primers,
  let's rank them by quality. Each primer pair has a
  ``PRIMER\_PAIR\_X\_PENALTY'', where X is 0 for the best pair of a
  particular template, 1 for the second best, and so on. We can extract
  and sort these values to discover the overall best primer pair.
#+end_src
#+begin_src sh <<Refine tutorial analysis, P. \ref{furTut}>>=
  grep PRIMER_PAIR_0_PENALTY prim.out |
      tr '=' '\t' |
      sort -k 2 -n |
      head -n 1
#+end_src
#+begin_src latex
  This has penalty 0.054910, a number that can now be used to find the
  corresponding primers in \texttt{prim.out}.

  \section{Checking Primers, \texttt{checkPrim}}\label{sec:checkTut}
  Primers are often checked by comparing them to the complete NCBI
  nucleotide database, \texttt{nt}. To avoid the overhead associated
  with handling this huge database, I constructed a smaller example for
  this Tutorial. 
  The file \texttt{p.fa} contains a pair of candidate forward and
  reverse primers that might be diagnostic for SARS-CoV-2. To check
  their potential for spurious amplification, we need two BLAST
  databases, a sequence database, and the BLAST taxonomy database to
  classify any hits we might find in the sequence database. Then two
  questions are asked. First, does the primer pair amplify SARS-CoV-2?
  This is the positive control. And then, does it amplify anything else?
  This is the negative control.
  \begin{prog}[\texttt{checkTut.sh}]\label{checkTut}
    \textcolor{white}{}
#+end_src
#+begin_src sh <<checkTut.sh>>=
  <<Get BLAST sequence database, P. \ref{checkTut}>>
  <<Get BLAST taxonomy database, P. \ref{checkTut}>>
  <<Carry out positive control, P. \ref{checkTut}>>
  <<Carry out negative control, P. \ref{checkTut}>>
#+end_src
#+begin_src latex
  \end{prog}
  The BLAST database needs to be housed in a suitable directory. In this
  tutorial we use the \texttt{data} directory that is part of this
  software package. Our data are Betacoronavirus sequences supplied by
  the NCBI. This is downloaded using the program
  \begin{verbatim}
  update_blastdb.pl
  \end{verbatim}
  which is part of the BLAST package.
#+end_src
#+begin_src sh <<Get BLAST sequence database, P. \ref{checkTut}>>=
  cd data
  update_blastdb.pl --decompress Betacoronavirus
#+end_src
#+begin_src latex
  The taxonomy database is downloaded in the same way. To make BLAST
  aware of its location, the \texttt{BLASTDB} environment variable is
  set. Once the BLAST database has been constructed, we return to the
  base directory of the package.
#+end_src
#+begin_src sh <<Get BLAST taxonomy database, P. \ref{checkTut}>>=
  update_blastdb.pl --decompress taxdb
  export BLASTDB=$(pwd)
  cd ..
#+end_src
#+begin_src latex
  For the positive control, we check that the candidate primers amplify
  a single region in SARS-CoV-2. The virus is identified by its
  taxonomy-id, which can be looked up on the NCBI taxonomy web site and
  happens to be 2697049.  If everything is working, a single interval is
  returned for most if not all of the many SARS-CoV-2 sequences
  contained in the database.
#+end_src
#+begin_src sh <<Carry out positive control, P. \ref{checkTut}>>=
  checkPrim -v query=data/p1.fa \
		    -v db=data/Betacoronavirus \
		    -v taxid=2697049
#+end_src
#+begin_src latex
  For the negative control, all hits to sequences not classified as
  SARS-CoV-2 are printed.
#+end_src
#+begin_src sh <<Carry out negative control, P. \ref{checkTut}>>=
  checkPrim -v query=data/p1.fa \
		    -v db=data/Betacoronavirus \
		    -v negativeTaxid=2697049
#+end_src
#+begin_src latex
  If there is no cross-amplification, or the spurious amplicons are
  found in acceptable taxa, the searches should be repeated in a larger
  database, ideally the complete collection of known nucleotide
  sequences, \texttt{nt}. The full list of available databases is show
  by
  \begin{verbatim}
  update_blastdb.pl --showall
  \end{verbatim}
  While we are primarily interested in spotting ``wrong'' amplicons,
  that is, in the results of the negative control, it is a good idea to
  always also perform the positive control to make sure the primers can
  actually be found in the test database.
#+end_src

