#+begin_src latex
  \section{Introduction}
  The marker candidates returned by \ty{fur} may contain long internal
  runs of \ty{N}, or prefixes or suffixes consisting of \ty{N}s. The
  program \ty{cleanSeq} cuts these runs and ensures that the resulting
  fragments are not too short.

  \section{Implementation}
  The outline of \ty{cleanSeq} has hooks for imports, types, functions,
  and the logic of the main function.  \bpr{cleanSeq}{pr:cle}
#+end_src
#+begin_src go <<cleanSeq.go>>=
  package main

  import (
	  //<<Imports, Pr.~\ref{pr:cle}>>
  )
  //<<Types, Pr.~\ref{pr:cle}>>
  //<<Functions, Pr.~\ref{pr:cle}>>
  func main() {
	  //<<Main function, Pr.~\ref{pr:cle}>>
  }
#+end_src
#+begin_src latex
  \epr In the main function we prepare the error messages, declare the
  options, set the usage, parse the options, and iterate over the input.
#+end_src
#+begin_src go <<Main function, Pr.~\ref{pr:cle}>>=
  util.PrepareErrorMessages("cleanSeq")
  //<<Declare options, Pr.~\ref{pr:cle}>>
  //<<Set usage, Pr.~\ref{pr:cle}>>
  //<<Parse options, Pr.~\ref{pr:cle}>>
  //<<Iterate over input, Pr.~\ref{pr:cle}>>
#+end_src
#+begin_export latex
We import \ty{util}.
#+end_export
#+begin_src go <<Imports, Pr.~\ref{pr:cle}>>=
  "github.com/evolbioinf/fur/util"
#+end_src
#+begin_src latex
  \ty{CleanSeq} requires a maximum length of internal runs and a minimum
  fragment length. The user can also use \ty{-v} to request the version.
#+end_src
#+begin_src go <<Declare options, Pr.~\ref{pr:cle}>>=
  var optL = flag.Int("l", 150, "maximum length of internal run of Ns")
  var optM = flag.Int("m", 100, "minimum fragment length")
  var optV = flag.Bool("v", false, "print version & " +
	  "program information")
#+end_src
#+begin_src latex
  We import \ty{flag}.
#+end_src
#+begin_src go <<Imports, Pr.~\ref{pr:cle}>>=
  "flag"
#+end_src
#+begin_src latex
  The usage consists of the usage message proper, an explanation of the
  program's purpose, and an example command.
#+end_src
#+begin_src go <<Set usage, Pr.~\ref{pr:cle}>>=
  u := "cleanSeq [-h] [option]... [file]..."
  p := "Cut runs of N from the sequences returned by fur."
  e := "cleanSeq foo.fasta"
  clio.Usage(u, p, e);
#+end_src
#+begin_src latex
  We import \ty{clio}.
#+end_src
#+begin_src go <<Imports, Pr.~\ref{pr:cle}>>=
  "github.com/evolbioinf/clio"
#+end_src
#+begin_src latex
  We parse the options and respond to \ty{-v}.
#+end_src
#+begin_src go <<Parse options, Pr.~\ref{pr:cle}>>=
  flag.Parse()
  if *optV {
	  util.PrintInfo("cleanSeq")
  }
#+end_src
#+begin_src latex
  We iterate over the input by calling \ty{clio.PaseFiles} on the input
  files. This takes as argument the function \ty{parse}, which in turn
  takes as arguments the parameters of the cleaning procedure.
#+end_src
#+begin_src go <<Iterate over input, Pr.~\ref{pr:cle}>>=
  files := flag.Args()
  clio.ParseFiles(files, parse, *optL, *optM)
#+end_src
#+begin_src latex
  In \ty{parse} we retrieve the arguments just passed and iterate over
  the sequences in the input file to clean them.
#+end_src
#+begin_src go <<Functions, Pr.~\ref{pr:cle}>>=
  func parse(r io.Reader, args ...interface{}) {
	  //<<Retrieve arguments, Pr.~\ref{pr:cle}>>
	  scanner := fasta.NewScanner(r)
	  for scanner.ScanSequence() {
		  sequence := scanner.Sequence()
		  //<<Clean sequence, Pr.~\ref{pr:cle}>>
	  }
  }
#+end_src
#+begin_src latex
  We import \ty{io} and \ty{fasta}.
#+end_src
#+begin_src go <<Imports, Pr.~\ref{pr:cle}>>=
  "io"
  "github.com/ivantsers/fasta"
#+end_src
#+begin_src latex
  We retrieve the two arguments just passed through type assertion.
#+end_src
#+begin_src go <<Retrieve arguments, Pr.~\ref{pr:cle}>>=
  maxRunLen := args[0].(int)
  minFragLen := args[1].(int)
#+end_src
#+begin_src latex
  We clean a sequence by first identifying its relevant runs of
  \ty{N}. Then we remove the runs and any short fragments thus
  produced. The remaining fragments are printed.
#+end_src
#+begin_src go <<Clean sequence, Pr.~\ref{pr:cle}>>=
  //<<Identify runs of \ty{N}, Pr.~\ref{pr:cle}>>
  //<<Remove runs of \ty{N}, Pr.~\ref{pr:cle}>>
  //<<Remove short fragments, Pr.~\ref{pr:cle}>>
  //<<Print fragments, Pr.~\ref{pr:cle}>>
#+end_src
#+begin_src latex
  We use a slice of intervals to store the start and end positions of
  runs runs after we checked them.
#+end_src
#+begin_src go <<Identify runs of \ty{N}, Pr.~\ref{pr:cle}>>=
  var runs []interval
  var run interval
  data := sequence.Data()
  n := len(data)
  for i := 0; i < n; i++ {
	  j := 0
	  for i+j < n && data[i+j] == 'N' { j++ }
	  //<<Check runs, Pr.~\ref{pr:cle}>>
	  i += j
  }
#+end_src
#+begin_src latex
  We declare an \ty{interval} with a \ty{start} and an \ty{end}.
#+end_src
#+begin_src go <<Types, Pr.~\ref{pr:cle}>>=
  type interval struct {
	  start, end int
  }
#+end_src
#+begin_src latex
  A valid run is either a prefix, a suffix, or it has the minimum number
  of \ty{N}s set by the user.
#+end_src
#+begin_src go <<Check runs, Pr.~\ref{pr:cle}>>=
  if (i == 0 && j > 0) || i + j == n || j >= maxRunLen {
	  run.start = i
	  run.end = i + j - 1
	  runs = append(runs, run)
  }
#+end_src
#+begin_src latex
  By removing runs of \ty{N}, we split the sequence in fragments, which
  we store in a slice. We consider two cases, no runs and at least one
  run.
#+end_src
#+begin_src go <<Remove runs of \ty{N}, Pr.~\ref{pr:cle}>>=
  var fragments []*fasta.Sequence
  if len(runs) == 0 {
	  //<<No run, Pr.~\ref{pr:cle}>>
  } else {
	  //<<At least one run, Pr.~\ref{pr:cle}>>
  }
#+end_src
#+begin_src latex
  If there weren't any runs, there is only one fragment, the original
  sequence, which we store.
#+end_src
#+begin_src go <<No run, Pr.~\ref{pr:cle}>>=
  fragments = append(fragments, sequence)
#+end_src
#+begin_src latex
  If there is at least one run, we do three things. We ask whether we
  are dealing with a prefix, we iterate over the internal runs, and we
  extract the fragment to the left of the last run.
#+end_src
#+begin_src go <<At least one run, Pr.~\ref{pr:cle}>>=
  //<<Is the run a prefix? Pr.~\ref{pr:cle}>>
  //<<Deal with internal runs, Pr.~\ref{pr:cle}>>
  //<<Extract last fragment, Pr.~\ref{pr:cle}>>
#+end_src
#+begin_src latex
  Whether or not a run is a prefix only matters if there is more than
  one run. In that case the end of the previous run is adjusted and the
  prefix squeezed from the slice.
#+end_src
#+begin_src go <<Is the run a prefix? Pr.~\ref{pr:cle}>>=
  prevEnd := -1
  if runs[0].start == 0 && len(runs) > 1 {
	  prevEnd = runs[0].end
	  runs = runs[1:]
  }
#+end_src
#+begin_src latex
We iterate over the runs and store the fragments we get.
#+end_src
#+begin_src go <<Deal with internal runs, Pr.~\ref{pr:cle}>>=
  header := sequence.Header()
  for _, run = range runs {
	  seq := fasta.NewSequence(header,
		  data[prevEnd+1:run.start])
	  fragments = append(fragments, seq)
	  prevEnd = run.end
  }
#+end_src
#+begin_src latex
  If the last run wasn't a suffix, we extract the fragments its removal
  generated.
#+end_src
#+begin_src go <<Extract last fragment, Pr.~\ref{pr:cle}>>=
  if run.end < n {
	  seq := fasta.NewSequence(header, data[run.end+1:])
	  fragments = append(fragments, seq)
  }
#+end_src
#+begin_src latex
  We squeeze short fragments out of the slice.
#+end_src
#+begin_src go <<Remove short fragments, Pr.~\ref{pr:cle}>>=
  i := 0
  for _, f := range fragments {
	  if len(f.Data()) >= minFragLen {
		  fragments[i] = f
		  i++
	  }
  }
  fragments = fragments[0:i]
#+end_src
#+begin_src latex
  Any fragments produced at this stage have the same header. If there
  are more than one, this is confusing, so we number them.
#+end_src
#+begin_src go <<Remove short fragments, Pr.~\ref{pr:cle}>>=
  if len(fragments) > 1 {
	  for i, f := range fragments {
		  f.AppendToHeader(" - F" + strconv.Itoa(i+1))
	  }
  }
#+end_src
#+begin_src latex 
  We import \ty{strconv}.
#+end_src
#+begin_src go <<Imports, Pr.~\ref{pr:cle}>>=
  "strconv"
#+end_src
#+begin_src latex
  We print the fragments using the print mechanism for sequences.
#+end_src
#+begin_src go <<Print fragments, Pr.~\ref{pr:cle}>>=
  for _, f := range fragments {
	  fmt.Println(f)
  }
#+end_src
#+begin_src latex
  We import \ty{fmt}.
#+end_src
#+begin_src go <<Imports, Pr.~\ref{pr:cle}>>=
  "fmt"
#+end_src
