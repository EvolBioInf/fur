#+begin_src latex
  \section{Introduction}
  PCR primers designed to amplify a specific region may also
  unintentionally amplify other regions in the same genome or in the
  genomes of other organisms. To guard against such off-target
  amplification, primers are compared to a suitable sequence database
  and all potential amplification products in a particular set of
  organisms reported. There already exists an excellent web-based
  program to carry out this \emph{in silico} PCR, Primer-BLAST. It is
  intended foremost as a tool for designing primers from scratch, but
  Primer-BLAST also contains a module for checking primer
  specificity. However, running programs over the internet is usually
  less scaleable than running them locally. Our aim is therefore to
  write a stand-alone primer checker, \texttt{checkPrim}.

  \section{Implementation}
  \texttt{checkPrim} takes as input a set of primers, a BLAST database,
  and an organism identified by one or more NCBI taxon-IDs. It returns
  the virtual PCR products, or amplicons, found in members of the taxa
  concerned. It can also do the opposite, return the amplicons found
  outside the members of the focal taxa.

  \ty{checkPrim} first switches the AWK field separator from default
  white space to tab. It then interacts with the user, sets optional
  parameters to defaults, and constructs the BLAST command for looking
  up the primer matches. We then filter the BLAST results, run the
  pipeline consisting of the BLAST command and the filter, and save the
  results. Finally, we analyzes the BLAST results to look for potential
  amplicons.  \bpr{checkPrim}{checkPrim}
#+end_src
#+begin_src awk <<checkPrim>>=
  #!/usr/bin/awk -f
  BEGIN {
    FS = "\t"
    <<Interact with user, P. \ref{checkPrim}>>
    <<Set default values of optional parameters, P. \ref{checkPrim}>>
    <<Construct BLAST command, P. \ref{checkPrim}>>
    <<Construct filter, P. \ref{checkPrim}>>
    <<Construct pipeline, P. \ref{checkPrim}>>
    <<Save BLAST results, P. \ref{checkPrim}>>
    <<Analyze BLAST results, P. \ref{checkPrim}>>
  }
#+end_src
#+begin_src latex
  \epr
  The user is asked to supply three parameters: A file containing one or
  more primers (\texttt{query}), a BLAST database (\texttt{db}), and at
  least one taxon-ID, which is interpreted either as the target
  (\texttt{taxids}) or its complement (\texttt{negativeTaxids}). The
  taxon-IDs can also be supplied as files (\ty{taxidList} and
  \ty{negativeTaxidList}). If one of the three required parameters is
  not supplied, a usage message is printed prompting for complete
  input. In addition, optional parameters can be set.
#+end_src
#+begin_src awk <<Interact with user, P. \ref{checkPrim}>>=
  //<<Initialize default values of optional parameters, P. \ref{checkPrim}>>
  if (!query || !db || !(taxids || negativeTaxids ||
			 taxidList || negativeTaxidList)) {
    m = "checkPrim: Check the specificity of PCR primers "
    m = m "using BLAST\n"
    m = m "Usage: checkPrim <options>\nOptions:\n"
    m = "\t-v query=<query>\n\t-v db=<db>"
    printf "%s\n", m
    //<<Print taxon-ID options, P. \ref{checkPrim}>>
    //<<Query optional parameters, P. \ref{checkPrim}>>
    exit 0
  }
#+end_src
#+begin_src latex
  The user can set taxon-IDs with comma-delimited lists or with files.
#+end_src
#+begin_src awk <<Print taxon-ID options, P. \ref{checkPrim}>>=
  printf "\t-v taxids=<t1,t2...> || "
  printf "-v negativeTaxids=<t1,t2...> || "
  printf "-v taxidList=<foo.txt> || "
  printf "-v negativeTaxidList=<foo.txt>\n"
#+end_src
#+begin_src latex
  There are five optional parameters: The maximum number of mismatches
  (\texttt{maxMism}), the maximum length of an amplicon
  (\texttt{maxLen}), the number of threads used by BLAST
  (\texttt{numThreads}), and the $E$-value (\texttt{evalue}). I took the
  default maximum number of mismatches and the maximum amplicon size
  from the Primer-BLAST website, and the $E$-value from the
  documentation of stand-alone \texttt{blastn}.
#+end_src
#+begin_src awk <<Initialize default values of optional parameters, P. \ref{checkPrim}>>=
  defMaxMism = 5
  defMaxLen = 4000
  defNumThreads = 1
  defEvalue = 10
#+end_src
#+begin_src latex
  The optional parameters are queried using the standard \texttt{-v}
  notation of AWK.
#+end_src
#+begin_src awk <<Query optional parameters, P. \ref{checkPrim}>>=
  printf "\t[-v maxMism=<maxMism>; default: %d]\n", defMaxMism
  printf "\t[-v maxLen=<maxLen>; default: %d]\n", defMaxLen
  printf "\t[-v numThreads=<numThreads>; default: %d]\n",
    defNumThreads
  printf "\t[-v evalue=<evalue>; default: %d]\n", defEvalue
#+end_src
#+begin_src latex
  Any undefined optional parameters are set to their defaults.
#+end_src
#+begin_src awk <<Set default values of optional parameters, P. \ref{checkPrim}>>=
  if (!maxMism)
    maxMism = defMaxMism
  if (!maxLen)
    maxLen = defMaxLen
  if (!numThreads)
    numThreads = defNumThreads
  if (!evalue)
    evalue = defEvalue
#+end_src
#+begin_src latex
  The BLAST search is based on the \texttt{blastn-short} mode of the
  \texttt{blastn} program. This mode is optimized for sequences shorter
  than 50 nucleotides. Then we set the output format and deal with the
  remaining parameters.
#+end_src
#+begin_src awk <<Construct BLAST command, P. \ref{checkPrim}>>=
  tmpl = "blastn -task blastn-short -query %s -db %s "
  //<<Set with output format, P. \ref{checkPrim}>>
  //<<Deal with remaining parameters, P. \ref{checkPrim}>>
#+end_src
#+begin_src latex 
  We return nine aspects of each BLAST hit: The query and subject
  accessions, the number of mismatches, the start and end positions on
  the subject, the query length, and the alignment length. In addition,
  we return two items of taxonomic information on the subject, the ID of
  the taxon and its scientific name. These nine columns of the BLAST
  output are summarized in Table~\ref{tab:blast}.
  \begin{table}
    \caption{The nine columns of output generated by our BLAST
      run.}\label{tab:blast}
    \begin{center}
    \begin{tabular}{llllll}
      1 & \ty{qacc} & 4 & \ty{sstart} & 7 & \ty{length}\\
      2 & \ty{sacc} & 5 & \ty{send}   & 8 & \ty{staxid}\\
      3 & \ty{mismatch} & 6 & \ty{qlen} & 9 & \ty{ssciname}
    \end{tabular}
    \end{center}
  \end{table}
#+end_src
#+begin_src awk <<Set with output format, P. \ref{checkPrim}>>=
  tmpl = tmpl "-outfmt \"6 qacc sacc mismatch sstart send "
  tmpl = tmpl "qlen length "
  tmpl = tmpl "staxid ssciname\" "
#+end_src
#+begin_src latex
#+end_src
#+begin_src latex
  The first batch of the remaining parameters consist of the $E$-value
  and the number of threads.
#+end_src
#+begin_src awk <<Deal with remaining parameters, P. \ref{checkPrim}>>=
  tmpl = tmpl "-evalue %d "
  tmpl = tmpl "-num_threads %d "
#+end_src
#+begin_src latex
  The second and last batch of remaining parameters is centered on the
  taxon-IDs. The user can supply taxon-IDs in one of four formats:
  positive or negative comma-delimited lists, and files of positive or
  negative taxon-IDs.
#+end_src
#+begin_src awk <<Deal with remaining parameters, P. \ref{checkPrim}>>=
  if (taxids)
    tmpl = tmpl "-taxids " taxids " "
  else if (negativeTaxids)
    tmpl = tmpl "-negative_taxids " negativeTaxids " "
  else if (taxidList)
    tmpl = tmpl "-taxidlist " taxidList " "
  else if (negativeTaxidList)
      tmpl = tmpl "-negative_taxidlist " negativeTaxidList " "
#+end_src
#+begin_src latex
  We filter the BLAST output so that all alignments have no more than
  the maximum number of mismatches. These alignments should also have
  the same length as the query, that is, we are looking for ungapped
  alignments that are global in the query and local in the subject.
#+end_src
#+begin_src awk <<Construct filter, P. \ref{checkPrim}>>=
  filter = "awk '$3 <= %d && $6 == $7' "
#+end_src
#+begin_src latex
  In our pipeline we either look for hits to a particular taxon, or for
  hits that don't come from that taxon.
#+end_src
#+begin_src awk <<Construct filter, P. \ref{checkPrim}>>=
  if (taxid)
    filter = filter "| awk '$8 == \"%s\"' "
  else {
    taxid = negativeTaxid
    filter = filter "| awk '$8 != \"%s\"' "
  }
#+end_src

#+begin_export latex
By default, BLAST results are sorted first by the input order of the
query---all matches of the first query followed by all matches to the
second, and so on---and then by their subject position. For
identifying spurious amplicons, it is more convenient to group the
results by subject and then sort by position within each subject.
#+end_export
#+begin_src awk <<Construct filter, P. \ref{checkPrim}>>=
  filter = filter "| sort -k 2,2 -k 4,4n"
#+end_src
#+begin_src latex
  We construct the BLAST pipeline by printing the BLAST command and the
  filter from their current templates. Then we combine the BLAST command
  and the filter into the final pipeline.
#+end_src
#+begin_src awk <<Construct pipeline, P. \ref{checkPrim}>>=
  cmd = sprintf(tmpl, query, db, evalue, numThreads)
  filter = sprintf(filter, maxMis, taxid)
  pipeline = cmd " | " filter
#+end_src
#+begin_src latex
  The BLAST pipeline is run, the results are saved, and we decide the
  strand on which the hit is located.
#+end_src
#+begin_src awk <<Save BLAST results, P. \ref{checkPrim}>>=
  n = 1 - 1
  while (pipeline | getline) {
    qacc[n] = $1
    sacc[n] = $2
    staxid[n] = $8
    ssciname[n] = $9
    <<Decide strand, P. \ref{checkPrim}>>
    n++
  }
  close(cmd)
#+end_src
#+begin_src latex
  All PRC reactions take double-stranded DNA as template. To visualize
  the primer configuration we are looking for in our BLAST search,
  consider the forward and reverse primers $p_{\rm f}$ and $p_{\rm r}$
  in the top panel of Figure~\ref{fig:pri}. They bind the forward and
  reverse strands of a template, $t_{\rm f}$ and $t_{\rm r}$. So
  regardless of which template strand has been sequenced, the 5'-primer
  of a potential amplicon is on the forward strand, the 3'-primer on the
  reverse strand.

  \begin{figure}
    \input{../checkPrim/primConfig}
    \caption{Forward and reverse PCR primers, $p_{\rm f}$ and $p_{\rm
	r}$ (top panel), along the forward or reverse strands of a
      template, $t_{\rm f}$ and $t_{\rm r}$ (bottom
      panel).}\label{fig:pri}
  \end{figure}

  BLAST encodes strand in the start and end positions of matches. If the
  start is less than the end, the match is on the forward strand;
  otherwise, the match is on the reverse strand. I find it more
  convenient to think of all matches in the customary 5' to 3'
  direction, which means I invert the coordinates of matches on the
  reverse strand and explicitly store the strand, 0 for forward, 1 for
  reverse.
#+end_src
#+begin_src awk <<Decide strand, P. \ref{checkPrim}>>=
  if ($4 < $5) {
    sstart[n] = $4
    send[n] = $5
    strand[n] = 0
  } else {
    sstart[n] = $5
    send[n] = $4
    strand[n] = 1
  }
#+end_src
#+begin_src latex
  When iterating over the BLAST results, every 5' match on the forward
  strand is paired with all 3' matches on the reverse strand closer than
  the maximum amplicon length. Any such pair of primers is a potential
  amplicon and is reported with the subject accession, the start and end
  positions of the amplicon on that subject, and the subject taxonomy.
#+end_src
#+begin_src awk <<Analyze BLAST results, P. \ref{checkPrim}>>=
  <<Print header, P. \ref{checkPrim}>>
  for (i = 0; i < n - 1; i++) {
    j = i + 1
    l = send[j] - sstart[i] + 1
    while (sacc[i] == sacc[j] && j < n && l <= maxLen) {
      if (strand[i] == 0 && strand[j] == 1)
	<<Print result, P. \ref{checkPrim}>>
      j++
    }
  }
#+end_src
#+begin_src latex
  The header is tab-delimited and marked by a hash in the first column.
#+end_src
#+begin_src awk <<Print header, P. \ref{checkPrim}>>=
  printf "# qacc\tqacc\tsacc\tsstart\tsend\tstaxid\t"
  print  "ssciname"
#+end_src
#+begin_src latex
  Each row of results is also printed as a tab-delimited row.
#+end_src
#+begin_src awk <<Print result, P. \ref{checkPrim}>>=
  printf("%s\t%s\t%s\t%d\t%d\t%d\t%s\n",
	 qacc[i], qacc[j], sacc[i], sstart[i], send[j],
	 staxid[i], ssciname[i])
#+end_src
#+begin_src latex
  We can now use \texttt{checkPrim} to check pairs of primers. An
  example application is shown in the tutorial,
  Section~\ref{sec:checkTut}.
#+end_src
