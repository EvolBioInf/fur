#+begin_src latex  
  \section{Introduction}
  To demonstrate \ty{fur}, we first apply it to simulated data, then to
  the \emph{E. coli} genomes introduced in Figure~\ref{fig:eco}.

  \section{Apply \ty{fur} to Simulated Data}
  We make a directory for this tutorial and change into it.
#+end_src
#+begin_src sh <<tut>>=
  mkdir tutorial
  cd tutorial
#+end_src
#+begin_src latex
  We use the program \ty{stan}\footnote{\ty{github.com/evolbioinf/stan}}
  to simulate target and neighbor sequences. To make the simulation
  reproducible, we seed the random number generator of \ty{stan} with
  the \ty{-s} option.
#+end_src
#+begin_src sh <<tut>>=
  stan -s 3
#+end_src
#+begin_src latex
  This has generated two directories, \ty{targets} and \ty{neighbors},
  with ten sequences each.
#+end_src
#+begin_src sh <<tut>>=
  ls targets/ | wc -l
  ls neighbors/ | wc -l
#+end_src
#+begin_src latex
  We visualize the relationship of the target and neighbor sequences by
  calculating their pairwise distances with
  \ty{phylonium}~\cite{klo20:phy}. We summarize these distances into the
  phylogeny in Figure~\ref{fig:phy}, where the targets, marked by prefix
  ``t'', are well separated from the neighbors, marked by prefix
  ``n''. The program \ty{phylonium} is part of common package
  repositories like \ty{apt}, the programs \ty{nj}, \ty{midRoot}, and
  \ty{plotTree} are part of the biobox collection of bioinformatics
  tools\footnote{\ty{github.com/evolbioinf/biobox}}.
  \begin{figure}
    \begin{center}
      \includegraphics{../tutorial/phy}
    \end{center}
    \caption{Phylogeny of a random sample of target and neighbor
      sequences generated with \ty{stan}.}\label{fig:phy}
  \end{figure}
#+end_src
#+begin_src sh <<tut>>=
  phylonium targets/* neighbors/* |
      nj |
      midRoot |
      plotTree
#+end_src
#+begin_src latex
  The target sequences are each 10 kb long, giving a total of 100 kb. We
  count the target nucleotides using \ty{cres}, which is also part of
  the biobox.
#+end_src
#+begin_src sh <<tut>>=
  cres targets/*
#+end_src
#+begin_src latex
  The neighbor sequences total only 90 kb, as they lack 1 kb right in
  the middle. In other words, the region 4501--5500 in the targets is
  the marker we'd like to identify.
#+end_src
#+begin_src sh <<tut>>=
  cres neighbors/*
#+end_src
#+begin_export latex
We convert the target and neighbor sequences into the database
\ty{test.db}.
#+end_export
#+begin_src sh <<tut>>=
  makeFurDb -t targets -n neighbors -d test.db
#+end_src
#+begin_export latex
We run \ty{fur} on the new database \ty{test.db}. This returns a
summary of the run and the marker fragment.
#+end_export
#+begin_src sh <<tut>>=
  fur -d test.db/
#+end_src
#+begin_export latex
\begin{verbatim}
  Step           Sequences  Length  Ns
  -------------  ---------  ------  --
  Subtraction_1          1    1044   0
  Intersection           1    1033  38
  Subtraction_2          1    1009  38
>t5_(4492..5500)   38  40  107  126  141  149  151...
CGGGGTATTTGAGATAATCACACCTGGGCTCTAGTGGCTNTCAGCAAAATCGG...
...CCATCGNCTGGCGCTTGACGATGCTTTTGAATATCGAGGAAGCATATCCTACC
\end{verbatim}
#+end_export
#+begin_export latex
As expected, the marker is approximately 1 kb long and centered on
position 5000. Its header consist of the accession, followed by the
interval, followed by the number of mutations among the target
sequences, followed by the positions of the mutations. The coordinates
of the fragment interval are given with respect to the target
representative, which is saved as \ty{r.fasta} in the database. So we
can double-check a fragment by cutting it from the target
representative using the program \ty{cutSeq} form the biobox.
#+end_export
#+begin_src sh <<tut>>=
  cutSeq -r 4492-5500 test.db/r.fasta
#+end_src
#+begin_src latex
  To make the process of marker selection more transparent, the \ty{-u}
  option allows printing of the unique regions found in the first
  subtraction step.
#+end_src
#+begin_src sh <<tut>>=
  fur -d test.db -u > unique1.fasta
#+end_src
#+begin_export latex
The file \ty{unique1.fasta} now contains the 1044 bp isolated in the
first subtraction step.
#+end_export
#+begin_src sh <<tut>>=
  cres unique1.fasta
#+end_src
#+begin_src latex
  Similarly, the regions identified by the intersection step can be
  printed using the \ty{-U} option.
#+end_src
#+begin_src sh <<tut>>=
  fur -d test.db -U > unique2.fasta
#+end_src
#+begin_src latex
  The file \texttt{unique2.fasta} now contains the 1033 bp returned by
  the intersection step.
#+end_src
#+begin_src sh <<tut>>=
  cres unique2.fasta
#+end_src
#+begin_export latex
Let's now explore the resource consumption of \ty{makeFurDb}. Its
expected run time is simply proportional to the number of neighbor
sequences---given constant target size. However, its expected memory
consumption is proportional to the length of the longest neighbor
sequence. Since the sequences simulated by \ty{stan} all have the same
length, the memory consumption of \ty{makeFurDb} should be independent
of the number of neighbor sequences. To show this is actually the
case, we start with simulated neighbors and targets of 5 Mb, the
length of an \emph{E. coli} genome.
#+end_export
#+begin_src sh <<tut>>=
  stan -o -l 5000000
#+end_src
#+begin_export latex
We now need to measure the run time and the memory consumption of
\ty{makeFurDb}. Time measurements are routinely carried out using the
\ty{time} command built into the shell. However, it cannot measure
memory, while the \ty{time} command of the system can. So we run that
by giving its explicit path, and ask it to print the user time, the
elapsed time, and the peak memory. We find on our test system that
\ty{makeFurDb} uses 26.6 s user time, but through parallelization runs
in only 4.4 s and occupies 3.5 GB of RAM.
#+end_export
#+begin_src sh <<tut>>=
  /usr/bin/time -f "user: %Us; elapsed: %es; memory: %Mkb" \
		makeFurDb -t targets/ -n neighbors/ \
		-d test.db -o
#+end_src
#+begin_export latex
If we'd rather use less RAM, we can run \ty{makeFurDb} with fewer
threads, let's run it with just one.
#+end_export
#+begin_src sh <<tut>>=
  /usr/bin/time -f "user: %Us; elapsed: %es; memory: %Mkb" \
		makeFurDb -t targets/ -n neighbors/ \
		-d test.db -o -T 1
#+end_src
#+begin_export latex
Now \ty{makeFurDb} only uses 11.8 s user time, which is close to the
12.0 s that elapsed. Its memory requirement is now just 623.0 MB, six
times less than in the parallel run.
#+end_export
#+begin_export latex
By comparison, the resource requirement of \ty{fur} is neglegible with
0.2 s elapsed and 135.4 MB RAM.
#+end_export
#+begin_src sh <<tut>>=
  /usr/bin/time -f "user: %Us; elapsed: %es; memory: %Mkb" \
		fur -d test.db/
#+end_src
#+begin_export latex
Let's double the size of the neighborhood.
#+end_export
#+begin_src sh <<tut>>=
  stan -o -l 5000000 -n 20
#+end_src
#+begin_export latex
As expected, the user time has now doubled to 50.2 s, and the elapsed
time has almost doubled to 7.7 s. However, the important point is that
the memory requirement has risen only slightly to 4.0 GB.
#+end_export
#+begin_src sh <<tut>>=
  /usr/bin/time -f "user: %Us; elapsed: %es; memory: %Mkb" \
		makeFurDb -t targets/ -n neighbors/ \
		-d test.db/ -o
#+end_src
#+begin_export latex
We finish the simulation part of the tutorial by deleting the database
\ty{test.db} and its source directories.
#+end_export
#+begin_src sh <<tut>>=
  rm -r test.db targets neighbors
#+end_src
#+begin_src latex
  \section{Apply \texttt{fur} to Real Data}\label{sec:furTut}
  We next use \texttt{fur} to find regions specific to the pathogenic
  \emph{E. coli} strain ST131 in the example data shown in
  Figure~\ref{fig:eco}. The first step is to download the data from the
  \ty{fur} website and to unpack it.
#+end_src
#+begin_src sh <<tut>>=
  wget guanine.evolbio.mpg.de/fur/eco105.tar.gz
  tar -xvzf eco105.tar.gz
#+end_src
#+begin_src latex
  This generates two directories of genomes in FASTA format,
  \texttt{targets} with 98 genomes, and \texttt{neighbors} with
  seven. These are converted to a \texttt{fur} database using
  \texttt{makeFurDb}  (Chapter~\ref{ch:makeFurDb}),
  which takes approximately 12 s.
#+end_src
#+begin_src sh <<tut>>=
  makeFurDb -t targets -n neighbors -d eco105.db
#+end_src
#+begin_src latex
  We apply \texttt{fur} to this database, which takes roughly three
  second. The marker candidates are stored in \texttt{eco105.fasta}.
  The progress information printed by \ty{fur} lists the three steps of
  the algorithm and the number of sequences and nucleotides contained in
  the template set after each step. So the initial subtraction step
  uncovers 291 sequences totaling 258.0 kb and containing no unknown
  nucleotides, \texttt{N}. After intersecting the remaining targets with
  the output from the first subtraction, 164 sequences with 56.0 kb
  remain. These sequences contain 442 \ty{N}s. The second and last
  subtraction step yields 34 regions with 25.5 kb and 1195 \ty{N}s.
#+end_src
#+begin_src sh <<tut>>=
  fur -d eco105.db/ > eco105.fasta
#+end_src
#+begin_src latex
  \begin{verbatim}
    Step           Sequences  Length    Ns
    -------------  ---------  ------    --
    Subtraction_1        291  257947     0
    Intersection         164   56020   442
    Subtraction_2         34   25509  1195
  \end{verbatim}

  The program \ty{fur} has a number of parameters that can affect its
  output. One of them is the length of the sliding window.  Since in our
  example a \ty{fur} run takes under three seconds, we can iterate over
  a range of window sizes using a \ty{do} loop, for example the 61
  window sizes 60--120. This should take no more than three minutes.

  The result of the \ty{do} loop is plotted with \ty{plotLine} from the
  biobox. Figure~\ref{fig:yie} shows the yield fluctuates with window
  size, so it might be worthwhile exploring a range of window lengths.

  \begin{figure}
    \begin{center}
      \includegraphics{../tutorial/yield}
    \end{center}
    \caption{The yield of \ty{fur} as a function of the window length.}\label{fig:yie}
  \end{figure}
#+end_src

#+begin_src sh <<tut>>=
  for a in $(seq 60 120)
  do
      echo -n $a " "
      fur -w $a -q 0.4 -d eco105.db/ 2>&1 |
	  grep "Subtraction_2" |
	  awk '{print $3}'
  done > yield.dat
  plotLine yield.dat
#+end_src
#+begin_src latex
  The last two parameters to mention affect the sensitivity of the
  second subtraction step, which is implemented as a BLAST search. This
  can be modulated via its mode (algorithm) and $E$-value. The mode of
  the BLAST-search among the neighborhood sequences is by default the
  sensitive ``blastn'' mode. Option \texttt{-m} switches it to the
  faster and less sensitive ``megablast'' mode. This increases the yield
  to 46.7 kb. By increasing the risk of false positives, we can increase
  the marker yield.
#+end_src
#+begin_src sh <<tut>>=
  fur -m -d eco105.db/ > eco105_2.fasta
#+end_src
#+begin_export latex
\begin{verbatim}
  Step           Sequences  Length   Ns
  -------------  ---------  ------   --
  Subtraction_1        291  257947    0
  Intersection         164   56020  442
  Subtraction_2        125   46719  329
\end{verbatim}
#+end_export
#+begin_export latex
The $E$-value is by default $10^{-5}$. Setting it to greater values
tends to decrease the yield as the condition for subtraction in the
second subtraction is relaxed. For example, if we set $E=10^{-2}$, the
yield decreases from 25.5 kb to 25.2 kb. Not much of a change.
#+end_export
#+begin_src sh <<tut>>=
  fur -e 1e-2 -d eco105.db/ > eco105_3.fasta
#+end_src
#+begin_export latex
\begin{verbatim}
  Step           Sequences  Length    Ns
  -------------  ---------  ------    --
  Subtraction_1        291  257947     0
  Intersection         164   56020   442
  Subtraction_2         32   25156  1284
\end{verbatim}
#+end_export
#+begin_export latex
Conversely, if we decrease the $E$-value, we relax the stringency of
the second subtraction step, which increases the yield. For example,
if we set $E=10{-2}$, the yield increases to 38.7 kb.
#+end_export
#+begin_export latex
\begin{verbatim}
  Step           Sequences  Length   Ns
  -------------  ---------  ------   --
  Subtraction_1        291  257947    0
  Intersection         164   56020  442
  Subtraction_2        113   38734  125
\end{verbatim}
#+end_export
#+begin_export latex
The output of \ty{fur} can serve as template for primer
design. Software for creating and testing primers is contained in the
\ty{prim} repo at
\begin{center}
  \ty{github.com/evolbioinf/prim}
\end{center}
#+end_export
